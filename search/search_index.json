{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"glossary/","text":"","title":"Glossary"},{"location":"introduction/","text":"","title":"Introduction"},{"location":"lab00/","text":"","title":"Index"},{"location":"lab01/","text":"","title":"Index"},{"location":"lab02/","text":"","title":"Index"},{"location":"lab03/","text":"","title":"Index"},{"location":"lab04/","text":"","title":"Index"},{"location":"lab05/","text":"","title":"Index"},{"location":"lab06/","text":"","title":"Index"},{"location":"lab06/calculator/","text":"","title":"Calculator"},{"location":"lab06/lab06/","text":"Lab 6 - \u6709\u9650\u72c0\u614b\u6a5f Working Environment Setup Introduction Traffic Light with 7-segment display controller \u9019\u500b\u5be6\u4f5c\u662f\u6709\u9650\u72c0\u614b\u6a5f\u7d93\u5178\u547d\u984c\uff1a\u7d05\u7da0\u71c8\uff0c\u5229\u7528\u4e0a\u79ae\u62dc\u6559\u7684Hardware Generator\uff0c\u6c7a\u5b9a\u7da0\u71c8\u4ee5\u53ca\u9ec3\u71c8\u7684\u6642\u9577(\u5169\u8005\u52a0\u8d77\u4f86\u6642\u9577\u70ba\u7d05\u71c8)\uff0c\u4e26\u5c07\u5012\u6578\u6642\u9593\u4ee5\u4e03\u6bb5\u986f\u793a\u5668\u7684\u65b9\u5f0f\u5448\u73fe stateDiagram-v2 idle --> hGreen,vRed hGreen,vRed --> hYellow,vRed hYellow,vRed --> hRed,vGreen hRed,vGreen --> hRed,vYellow hRed,vYellow --> hGreen,vRed","title":"Lab 6 - \u6709\u9650\u72c0\u614b\u6a5f"},{"location":"lab06/lab06/#lab-6-","text":"","title":"Lab 6 - \u6709\u9650\u72c0\u614b\u6a5f"},{"location":"lab06/lab06/#working-environment-setup","text":"","title":"Working Environment Setup"},{"location":"lab06/lab06/#introduction","text":"","title":"Introduction"},{"location":"lab06/lab06/#traffic-light-with-7-segment-display-controller","text":"\u9019\u500b\u5be6\u4f5c\u662f\u6709\u9650\u72c0\u614b\u6a5f\u7d93\u5178\u547d\u984c\uff1a\u7d05\u7da0\u71c8\uff0c\u5229\u7528\u4e0a\u79ae\u62dc\u6559\u7684Hardware Generator\uff0c\u6c7a\u5b9a\u7da0\u71c8\u4ee5\u53ca\u9ec3\u71c8\u7684\u6642\u9577(\u5169\u8005\u52a0\u8d77\u4f86\u6642\u9577\u70ba\u7d05\u71c8)\uff0c\u4e26\u5c07\u5012\u6578\u6642\u9593\u4ee5\u4e03\u6bb5\u986f\u793a\u5668\u7684\u65b9\u5f0f\u5448\u73fe stateDiagram-v2 idle --> hGreen,vRed hGreen,vRed --> hYellow,vRed hYellow,vRed --> hRed,vGreen hRed,vGreen --> hRed,vYellow hRed,vYellow --> hGreen,vRed","title":"Traffic Light with 7-segment display controller"},{"location":"lab06/lab6/","text":"Lab6 FSM Design Working Environment Setup ## bring up the AIAS course docker container ## clone the lab6 files $ cd /workspace/projects $ git clone https://playlab.computing.ncku.edu.tw:4001/aias_spring_2022/Lab06.git Lab06 $ cd Lab06 ## add your private upstream repositories ## make sure you have create project repo under your gitlab account $ git remote add gitlab https://playlab.computing.ncku.edu.tw:4001/<your ldap name>/Lab06.git $ git remote -v gitlab https://playlab.computing.ncku.edu.tw:4001/<your ldap name>/Lab06.git ( fetch ) gitlab https://playlab.computing.ncku.edu.tw:4001/<your ldap name>/Lab06.git ( push ) origin https://playlab.computing.ncku.edu.tw:4001/aias_spring_2022/Lab06.git ( fetch ) origin https://playlab.computing.ncku.edu.tw:4001/aias_spring_2022/Lab06.git ( push ) Follow Create project and Manage Permission to create your own project repo. You can find both section in AIAS 2022 Git command reference When you are done with your code, you have to push your code back to your own gitlab account with the following command... ## the first time $ git push --set-upstream https://playlab.computing.ncku.edu.tw:4001/<your ldap name>/Lab06.git master ## after the first time $ git fetch origin master $ git push gitlab master File in Lab06 \u2500Lab06/ \u251c\u2500 .git and .gitignore \u251c\u2500 build.sh \u251c\u2500 build.sbt \u251c\u2500 build.sc \u2514\u2500 src/ \u251c\u2500main/ | \u2514\u2500scala/ | \u2514\u2500aias_lab6/ | \u251c\u2500Hw1/TrafficLight_p.scala | \u251c\u2500Hw2/ | | \u251c\u2500CpxCal.scala | | \u251c\u2500LongCal.scala | | \u2514\u2500NegIntGen.scala | \u251c\u2500Hw3/ | | \u251c\u2500PRNG.scala | | \u2514\u2500NumGuess.scala | \u251c\u2500Bonus/ | | \u251c\u2500Solver.scala | | \u2514\u2500top.scala | \u251c\u2500Lab1/ | | \u251c\u2500Counter.scala | | \u251c\u2500SevenSeg.scala | | \u2514\u2500TrafficLight.scala | \u251c\u2500Lab2/ | | \u251c\u2500EasyCal.scala | | \u2514\u2500IntGen.scala | \u2514\u2500Lab3/ | \u251c\u2500LFSR_Fibonacci.scala | \u2514\u2500LFSR_Galois.scala \u2514\u2500test/ \u2514\u2500scala/ \u2514\u2500aias_lab6/ \u251c\u2500Hw1/TrafficLight_pTest.scala \u251c\u2500Hw2/ | \u251c\u2500CpxCalTest.scala | \u251c\u2500LongCalTest.scala | \u2514\u2500NegIntGenTest.scala \u251c\u2500Hw3/ | \u251c\u2500PRNGTest.scala | \u2514\u2500NumGuessTest.scala \u251c\u2500Bonus/ | \u251c\u2500SolverTest.scala | \u2514\u2500topTest.scala \u251c\u2500Lab1/ | \u251c\u2500CounterTest.scala | \u2514\u2500TrafficLightTest.scala \u251c\u2500Lab2/ | \u251c\u2500EasyCalTest.scala | \u2514\u2500IntGenTest.scala \u2514\u2500Lab3/ \u251c\u2500LFSR_FibonacciTest.scala \u2514\u2500LFSR_GaloisTest.scala Introduction \u5728\u8ab2\u5802\u4e0a\uff0c\u4ecb\u7d39\u4e86... \u96fb\u8def\u884c\u70ba\u7684\u72c0\u614b\u5716(State Transition Diagram)\u7e6a\u88fd\u4e26\u4ee5FSM\u7684\u65b9\u5f0f\u5be6\u73fe FSM\u7684\u57fa\u672c\u7d44\u6210 next state decoder (comb.) output decoder (comb.) state register (seq.) FSM\u7684\u5169\u5927\u6d3e\u5225 Mealey\uff1aoutput\u53ea\u548c\u7576\u524dstate\u76f8\u95dc\u3002 Moore\uff1aoutput\u548c\u7576\u524dstate\u4ee5\u53cainput\u76f8\u95dc\u3002 \u90a3\u5728\u9019\u6b21Lab\u4e2d\u4f60\u6703\u5b78\u7fd2\u5230\uff1a \u57fa\u672cFSM\u7684\u5beb\u6cd5\uff0c\u4e26\u4ee5\u4e4b\u5be6\u73fe\u8907\u96dc\u96fb\u8def\u529f\u80fd\u3002 Chisel-Related coding skill Info \u5efa\u8b70\u540c\u5b78\u53ef\u4ee5\u5148\u770bchisel book\u7684FSM\u90e8\u5206\u3002 \u4ee5\u4e0b\u5217\u8209\u4e86\u4e00\u4e9b\u5728\u5be6\u4f5cFSM\u6642\u5e38\u7528\u5230\u7684\u8a9e\u6cd5 Enumeration from chisel3.util.Enum code ```scala= //\u8a18\u5f97\u8981import\u9019\u500blibrary import chisel3.util._ val sIdle :: sMonday :: sTuesday :: sWendsday :: Nil = Enum(4) //\u4f60\u4e5f\u53ef\u4ee5\u7528\u9010\u4e00\u5ba3\u544a\u7684\u65b9\u5f0f... val sIdle = 0.U val sMonday = 1.U ... - \u9084\u8a18\u5f97preview\uff0c\u6709\u653e\u4e0a\u5169\u7bc7\u4ecb\u7d39scala\u4e2d\u6709\u95dc\u5404\u5f0f**\u96c6\u5408**\u7684\u6587\u7ae0\u55ce\uff1f[1](https://blog.csdn.net/qq_34291505/article/details/86832500)\u548c[2](https://vvviy.github.io/2018/12/12/Learning-Chisel-and-Scala-Part-II/) - Enum(4)\u6703\u7de8\u865f\u5de6\u908alist\u4e2d\u6bcf\u500b\u5143\u7d20\uff0cDtype\u70baUInt\uff0c\u5f9e0.U\u958b\u59cb\u3002 - Nil\u70balist\u7684\u7d50\u5c3e\uff0c\u4e0d\u5305\u542b\u5728list\u7684\u201c\u9577\u5ea6\u201d\u4e2d\u3002 - \u6240\u4ee5\u5728\u4f60\u4f7f\u7528\u689d\u4ef6\u5224\u65b7\u6642\uff0c\u4e0b\u9762\u9019\u5169\u884c\u662f\u7b49\u50f9\u7684\uff0c\u4f46\u4e0a\u9762\u7684\u5224\u8b80\u6027\u5c31\u76f8\u5c0d\u8f03\u597d\u4e9b\u3002 chisel= when (state === sIdle){...} when (state === 0.U){...} 3. **Conditional block** 1. when-elsewhen-otherwise - format chisel= when(condition){ //behavior }.elsewhen(condition){ //behavior }.otherwise{ //default behavior } :::info - reminder - chisel\u4e2d\uff1a**\u7b49\u65bc**(**===**)\u548c**\u4e0d\u7b49\u65bc**(**=/=**) - elsewhen\u548cotherwise\u524d\u9762\u8981\u8a18\u5f97\u52a0\u4e0a\u9ede(.) ::: 3. switch-is - format chisel= // default behavior switch(\u5224\u65b7\u5c0d\u8c61){ is(condition){ //behavior } is(condition){ //behavior } ... } ``` :::info - reminder - switch-is\u672c\u8eab\u6c92\u6709\u53ef\u4ee5\u6c7a\u5b9a\u96fb\u8defdefault\u884c\u70ba\u7684\u5beb\u6cd5\uff0c\u6703\u5efa\u8b70\u5927\u5bb6\u5728 \u524d\u9762 \u88dc\u4e0adefault behavior\u3002 - \u88dc\u9f4a\u8a0a\u865f\u96a8\u689d\u4ef6\u6539\u8b8a\u7684\u5b8c\u6574\u6027\uff0c\u786c\u9ad4\u5408\u6210\u6642\u53ef\u4ee5\u6e1b\u5c11latch\u7684\u51fa\u73fe\u3002 - default\u5ba3\u544a\u5728\u524d\u9762\u662f\u56e0\u70bachisel\u662f\u8d8a \u5f8c\u9762 \u7684\u5ba3\u544apriority\u8d8a\u5927\u3002 ::: Lab-6.1 Traffic Light and 7-segment display controller - Introduction Lab6-1\u70ba\u5be6\u4f5cFSM\u7d93\u5178\u547d\u984c\uff1a\u7d05\u7da0\u71c8\uff0c\u5229\u7528\u4e0a\u79ae\u62dc\u6559\u7684Hardware Generator\uff0c\u6c7a\u5b9a\u7da0\u71c8\u4ee5\u53ca\u9ec3\u71c8\u7684\u6642\u9577(\u5169\u8005\u52a0\u8d77\u4f86\u6642\u9577\u70ba\u7d05\u71c8)\uff0c\u4e26\u5c07\u5012\u6578\u6642\u9593\u4ee5\u4e03\u6bb5\u986f\u793a\u5668\u7684\u65b9\u5f0f\u5448\u73fe\u3002 Counter counter\u4e5f\u662f\u500b\u5c0f\u578b\u7684FSM\uff0c\u5b58\u503c\u4e00\u76f4\u52a0\u4e00\uff0c\u76f4\u5230\u6578\u5230\u6700\u5927\u9650\u5236\u6642\u6b78\u96f6\u3002 \u4f60\u7576\u7136\u53ef\u4ee5\u4f7f\u7528FSM\u4f86\u63cf\u8ff0counter\uff0c\u4f46\u5047\u8a2d\u8a2d\u8a08\u70ba0~7\uff0c\u90a3\u5c31\u6703\u67098\u500b\u72c0\u614b\u9700\u8981\u63cf\u8ff0\uff0c\u4f46\u90198\u500b\u72c0\u614b\u53c8\u67097\u500b\u884c\u70ba\u6a21\u5f0f\u7686\u76f8\u540c\uff0c\u5012\u4e0d\u5982\u76f4\u63a5\u63cf\u8ff0\u66ab\u5b58\u5668\u7684\u884c\u70ba\u5c31\u597d\u3002 Counter example code ```scala= counter = RegInit(0.U(3.W)) counter := Mux(counter===7.U,0.U,counter+1.U) //or when(counter===7.U){counter:=0.U} .otherwise{counter:=counter+1.U} ``` 7-segment display \u5c07\u5012\u6578\u6642\u9593\u5177\u73fe\u5316\u7684\u5de5\u5177 \u50c5\u7531Comb. circuit\u7d44\u6210\uff0c\u82e5\u5c07Counter\u8996\u70baFSM\uff0c\u90a3\u9ebc\u6b64\u90e8\u5206\u5373\u70baOutput Decoder a~g\u70ba\u6bcf\u4e00\u6bb5\u7684\u7de8\u865f\uff0c\u800c\u5f8c\u9762\u63a5\u7684\u6578\u5b57\u5247\u8868\u793a\u5728\u986f\u793a\u54ea\u6578\u5b57\u6642\u8a72\u6bb5\u9700\u8b8a\u4eae\u3002 a\uff1a0\u30012\u30013\u30015\u30016\u30017\u30018\u30019 b\uff1a0\u30011\u30012\u30013\u30014\u30017\u30018\u30019 c\uff1a0\u30011\u30013\u30014\u30015\u30016\u30017\u30018\u30019 d\uff1a0\u30012\u30013\u30015\u30016\u30018\u30019 e\uff1a0\u30012\u30016\u30018 f\uff1a0\u30014\u30015\u30016\u30018\u30019 g\uff1a2\u30013\u30014\u30015\u30016\u30018\u30019 Implement port declaration Input None \u96fb\u8defreset\u5f8c\u5c31\u4e0d\u65b7\u958b\u59cb\u6578\uff0c\u7121\u5916\u754c\u56e0\u7d20\u5f71\u97ffFSM\u904b\u4f5c\u3002 Output H_traffic\uff1a\u6c34\u5e73\u8def\u6bb5\u7684\u71c8\u865f\u5448\u73fe(Off\uff1a0 Red\uff1a1 Yellow\uff1a2 Green\uff1a3) V_traffic\uff1a\u5782\u76f4\u8def\u6bb5\u7684\u71c8\u865f\u5448\u73fe(Off\uff1a0 Red\uff1a1 Yellow\uff1a2 Green\uff1a3) timer\uff1a\u5012\u6578\u8a08\u6642\u5668 display\uff1a\u4e03\u6bb5\u986f\u793a\u5668\u76847\u6bb5\u8a0a\u865f\u3002 state transition diagram Lab6-1 TrafficLight Code ```scala= class TrafficLight(Ytime:Int, Gtime:Int) extends Module{ val io = IO(new Bundle{ val H_traffic = Output(UInt(2.W)) val V_traffic = Output(UInt(2.W)) val timer = Output(UInt(5.W)) val display = Output(UInt(7.W)) }) //parameter declaration val Off = 0.U val Red = 1.U val Yellow = 2.U val Green = 3.U val sIdle :: sHGVR :: sHYVR :: sHRVG :: sHRVY :: Nil = Enum(5) //State register val state = RegInit(sIdle) //Counter============================ val cntMode = WireDefault(0.U(1.W)) val cntReg = RegInit(0.U(4.W)) val cntDone = Wire(Bool()) cntDone := cntReg === 0.U when(cntDone){ when(cntMode === 0.U){ cntReg := (Gtime-1).U }.elsewhen(cntMode === 1.U){ cntReg := (Ytime-1).U } }.otherwise{ cntReg := cntReg - 1.U } //Counter end======================== //Next State Decoder switch(state){ is(sIdle){ state := sHGVR } is(sHGVR){ when(cntDone) {state := sHYVR} } is(sHYVR){ when(cntDone) {state := sHRVG} } is(sHRVG){ when(cntDone) {state := sHRVY} } is(sHRVY){ when(cntDone) {state := sHGVR} } } //Output Decoder //Default statement cntMode := 0.U io.H_traffic := Off io.V_traffic := Off switch(state){ is(sHGVR){ cntMode := 1.U io.H_traffic := Green io.V_traffic := Red } is(sHYVR){ cntMode := 0.U io.H_traffic := Yellow io.V_traffic := Red } is(sHRVG){ cntMode := 1.U io.H_traffic := Red io.V_traffic := Green } is(sHRVY){ cntMode := 0.U io.H_traffic := Red io.V_traffic := Yellow } } io.timer := cntReg val ss = Module(new SevenSeg()) ss.io.num := cntReg io.display := ss.io.display } - \u63a5\u8457\u57f7\u884c\u9019\u689d\u6307\u4ee4... shell= $ mill chiselModule.test.runMain aias_lab6.Lab1.TrafficLightTest ``` - \u7d50\u679c... - \u7da0\u71c8\u6642\u9577\u5728tester\u88e1\u8a2d\u70ba7\uff0c\u70ba6~0 - \u9ec3\u71c8\u6642\u9577\u5728tester\u88e1\u8a2d\u70ba3\uff0c\u70ba2~0 :::warning - TrafficLight.scala\u884c\u70ba\u63cf\u8ff0 TrafficLight.scala\u5167\u90e8\u7684\u4e92\u52d5 [name=\u738b\u51f1\u5f18] ::: Lab6-2 Arithmetic Calculator Introduction \u6b64\u6b21 \u4f5c\u696d \u5e0c\u671b\u540c\u5b78\u53ef\u4ee5\u5be6\u73fe\u64c1\u6709\u52a0\u6e1b\u4e58\u529f\u80fd\u7684\u4e14\u9075\u5b88\u56db\u5247\u904b\u7b97\u898f\u5247\u7684\u8a08\u7b97\u6a5f\uff0c\u8f38\u5165\u7b97\u5f0f\u7684\u65b9\u5f0f\u6703\u4ee5series\u8f38\u5165\uff0c\u540c\u5b78\u9700\u6839\u64da\u4e0d\u540c\u7684\u96fb\u8def\u201d\u72c0\u614b\u201c\u4f86\u56e0\u61c9\u7576\u524d\u8f38\u5165\u4fe1\u865f\u7684\u8655\u7406\u3002 \u7531Lab6-2\u958b\u59cb\u5165\u9580\uff0c\u4f5c\u696d\u518d\u9032\u884c\u5f8c\u7e8c\u5ef6\u4f38\u3002 Level_1 Integer Generator Level_2 2 operands 1 operator(+\u3001-\u3001*) HomeWork Level_3 negative Integer Generator Level_4 N operands N-1 operators(+\u3001-) Level_5 Order of Operation (+\u3001-\u3001*\u3001(\u3001)) \u6578\u5b57\u9375\u7b26\u865f\u9375\u548c\u786c\u9ad4\u8f38\u5165\u8a0a\u865f\u7684mapping\uff0c\u525b\u597d4bits\u5c31\u80fd\u5b8c\u6574\u8868\u793a\u6211\u5011\u9700\u8981\u7684input\uff1a input HardWare 0 0x0 1 0x1 2 - 0x2 3 0x3 4 0x4 5 0x5 6 0x6 7 0x7 8 0x8 9 0x9 + 0xA - 0xB * 0xC ( 0xD ) 0xE = 0xF Lab6-2-1 Integer Generator Introduction \u4e00\u53f0\u529f\u80fd\u6b63\u5e38\u7684\u8a08\u7b97\u6a5f\uff0c\u7576\u4f60\u8f38\u5165\u5e38\u6578\u6309\u4e0b\u7b49\u865f\u5f8c\uff0c\u5fc5\u6703\u986f\u793a\u51fa\u525b\u525b\u8f38\u5165\u7684\u6578\u5b57\u3002 Input: 1 2 3 4 = Output: 1234 \u6b64\u6b21lab\u5e0c\u671b\u540c\u5b78\u80fd\u5920\u4f9d\u7167\u8f38\u5165\u9806\u5e8f\u7684\u6b0a\u91cd\u5c07\u8f38\u5165\u7d44\u5408\u6210\u671f\u671b\u7684\u6578\u5b57\u3002 State declaration sIdle \uff1areset\u4e2d\u3002 \u5207\u63db\u81f3sAccept\uff1areset\u8a0a\u865f\u7d50\u675f\u7684\u4e0b\u4e00\u523b\u96fb\u8def\u958b\u59cb\u904b\u4f5c\u3002 sAccept \uff1a\u63a5\u6536\u8f38\u5165\u4e26\u7d44\u5408\u6578\u5b57\u3002 \u5207\u63db\u81f3sEqual\uff1a\u63a5\u6536\u5230\"=(15)\"\u6642 sEqual \uff1a \u6e05\u7a7anumber\u66ab\u5b58\u5668\uff0c\u4ee5\u6e96\u5099\u4e0b\u4e00\u6b21\u7684\u8f38\u5165\u3002 \u986f\u793a\u7d44\u5408\u51fa\u7684\u6578\u5b57\uff0c\u4e26\u5c07Valid\u8a0a\u865f\u8a2d\u70batrue\u3002 \u518d\u6b21\u5207\u63db\u81f3sAccept\uff0c\u6e96\u5099\u958b\u59cb\u63a5\u53d7\u4e0b\u4e00\u7b46\u6e2c\u503c\u3002 :::info \u96fb\u8def\u8a2d\u8a08\u4e2d\uff0c\u96e3\u4ee5\u907f\u514d\u7684\u662fI/O port\u4e0a\u96a8\u6642\u90fd\u6709\u503c\uff0c\u53ea\u80fd\u4f9d\u9760 ready-valid\u5354\u8b70 \u4f86\u8b93\u5f7c\u6b64\u76f8\u9023\u7684\u5169\u500bblocks\u77e5\u9053\u76ee\u524d\u5728port\u4e0a\u7684\u8cc7\u6599\u662f\u5426\u53ef\u4ee5\u53d6\u7528\u3002 \u518d\u66f4\u8907\u96dc\u7684chisel\u8a2d\u8a08\u4e2d\uff0c\u5e38\u6703\u898b\u5f97\u5728I/O port\u8207Data type\u7684\u5ba3\u544a\u9593\uff0c\u591a\u5305\u4e86\u4e00\u5c64 Valid (\u6c92\u6709ready)\u3001\u6216\u8005\u662f DecoupledIO (\u5982\u4e0b\u9762\u7a0b\u5f0f\u78bc\u7684\u7b2c4\u884c)\uff0c\u4e00\u65e6\u5305\u4e0a\uff0c\u5728\u53d6\u503c\u4e0a\u6703\u8207\u539f\u672c\u7684\u8a9e\u6cd5\u6709\u4e9b\u4e0d\u540c\uff0c\u5fc5\u9808\u5f97\u591a\u52a0\u4e0a\u4ee5\u4e0b\u4e09\u9805\uff0c\u624d\u80fd\u53d6\u5230\u6216\u8ce6\u503c\u7d66\u4f60\u60f3\u8981\u7684wire(\u4e0b\u9762\u7a0b\u5f0f\u78bcLine36\u300137)\u3002 ready(input)\uff1a\u63a5\u53d7\u4f86\u81ea\u4e0b\u4e00\u7d1a\u7684ready\u8a0a\u865f\uff0c(\u4e0b\u4e00\u7d1a\u96fb\u8def)\u5411\u4e0a\u4e00\u7d1a\u6e96\u5099\u597d\u63a5\u53d7\u4e0b\u4e00\u7b46\u8cc7\u6599\u4e86\u3002 valid(output)\uff1a\u50b3\u905e\u7d66\u4e0b\u4e00\u7d1a\u8868\u793a\u76ee\u524dport\u4e0a\u9019\u7b46\u8cc7\u6599\u70ba\u53ef\u4ee5\u53d6\u7528\u3002 bits\uff1adata \u4e58\u4ee510\u7684\u5be6\u73fe\u65b9\u5f0f(line 29) \u96fb\u8def\u8a2d\u8a08\u4e2d\uff0c\u82e5\u5beb *10\uff0c\u4ee3\u50f9\u6703\u662f\u5408\u6210\u51fa\u4e00 \u4e58\u6cd5\u5668 \uff0c\u56b4\u91cd\u5f71\u97ff\u786c\u9ad4\u9762\u7a4d\u7684\u7f6a\u9b41\u798d\u9996...\u4e58\u6cd5\u5668\u7684\u51fa\u73fe\u61c9\u8a72\u53ea\u6709\u5728\u96fb\u8def\u9700\u8981\u5f88general\u7684\u4e58\u6cd5\u6642\u624d\u4e0d\u5f97\u4e0d\u51fa\u73fe(ex\uff1a\u5feb\u901f\u5085\u7acb\u8449\u8f49\u63db)\uff0c\u82e5\u55ae\u55ae\u53ea\u9700\u8981*10\uff0c\u61c9\u4ee5shift\u548cadd\u53d6\u800c\u4ee3\u4e4b\u3002 ::: :::info [name=\u5f35\u5cfb\u8c6a] DecoupledIO\u7684\u7528\u6cd5 Decoupled \u901a\u5e38\u7528\u65bc module \u8f38\u51fa\u7aef\u8a0a\u865f\u7684\u5ba3\u544a \u56e0\u70ba\u5982\u679c\u5229\u7528 Decoupled \u5ba3\u544a\u67d0\u4e00\u500b IO Port\uff0c\u5247 Chisel \u6703\u7de8\u8b6f\u751f\u6210\u4ee5\u4e0b\u96fb\u8def \u5176\u4e2d\u539f\u672c\u7684\u8f38\u51fa\u8a0a\u865f\u6703\u5305\u542b\u4ee5\u4e0b\u4e09\u500b\u90e8\u5206 io.outSignal.bits io.outSignal.valid io.outSignal.ready \u800c bits \u548c valid \u7684\u5c6c\u6027\u90fd\u662f Output \uff0c\u4f46\u8981\u6ce8\u610f ready \u7684\u5c6c\u6027\u70ba Intput \u3002\u901a\u5e38 ready \u8a0a\u865f\u6703\u63a5\u6536\u4e0b\u4e00\u7d1a\uff08next stage\uff09\u96fb\u8def\u50b3\u4f86\u7684 ready \u8a0a\u865f\uff0c\u53ea\u6709\u7576\u4e0b\u4e00\u7d1a\u96fb\u8def\u7684 ready \u8a0a\u865f\u548c\u76ee\u524d\u6a21\u7d44\u7684 valid \u8a0a\u865f\u540c\u70ba High \u6642\uff0c\u8a72\u6a21\u7d44\u7684\u8f38\u51fa\u4fe1\u865f\u624d\u6703\u88ab\u4e0b\u4e00\u7d1a\u96fb\u8def\u63a1\u7528 \uff08\u6240\u4ee5\u624d\u6703\u88ab\u7a31\u70ba\u63e1\u624b\u5354\u8b70\uff0c\u56e0\u70ba\u53ea\u6709\u7576\u6211\u7684 valid \u548c\u4ed6\u7684 ready \u90fd\u70ba High \u6642\uff0c\u6211\u7684\u8f38\u51fa\u624d\u6703\u88ab\u4ed6\u6240\u63a1\u7528\uff0c\u5c31\u50cf\u662f\u6211\u5011\u5169\u500b\u90fd\u5404\u81ea\u60f3\u548c\u5c0d\u65b9\u63e1\u624b\uff0c\u6211\u5011\u624d\u80fd\u63e1\u624b\u4e00\u6a23\u3002\uff09 \u5ba3\u544a IO Port \u7684\u6642\u5019\uff0c\u5229\u7528\u4ee5\u4e0b\u65b9\u5f0f\u5ba3\u544a scala= val io = IO(new Bundle{ outSignal = Decoupled(Output(Dtype(width.W))) // ... }) \u5176\u4e2d Dtype \u662f\u8a0a\u865f\u985e\u578b\uff0c\u4f8b\u5982 UInt \u3001 Bool \u7b49\u7b49... \u66f4\u591a\u7528\u6cd5\u8209\u4f8b\u53ef\u4ee5\u53c3\u8003\uff1a Decoupled\u7528\u6cd5 ::: :::info [name=\u5f35\u5cfb\u8c6a] \u4e58\u4ee5 10 \u65b9\u6cd5\u7684\u89e3\u91cb \u5728\u4e0b\u9762\u52a9\u6559\u7684\u7bc4\u4f8b\u7a0b\u5f0f\u88e1\u9762\u5beb\u5230 scala= number := (number<<3.U) + (number<<1.U) + in_buffer \u4ed6\u7684\u542b\u7fa9\u5176\u5be6\u5c31\u662f\uff0c\u5f80\u5de6 shift 3-bits \u7b49\u540c\u65bc\u4e58\u4ee58\uff0c\u800c\u5f80\u5de6 shift 1-bits \u7b49\u540c\u65bc\u4e58\u4ee52\uff0c\u6240\u4ee5\u5169\u8005\u76f8\u52a0\u5c31\u7b49\u50f9\u65bc\u4e58\u4ee510\u3002 ::: Hardware Circuit Overview Lab6-2-1 IntGen.scala code ```scala= class IntGen extends Module{ val io = IO(new Bundle{ val key_in = Input(UInt(4.W)) val value = Output(Valid(UInt(32.W))) }) val equal = WireDefault(false.B) equal := io.key_in === 15.U val sIdle :: sAccept :: sEqual :: Nil = Enum(3) val state = RegInit(sIdle) //Next State Decoder switch(state){ is(sIdle){ state := sAccept } is(sAccept){ when(equal) {state := sEqual} } is(sEqual){ state := sAccept } } val in_buffer = RegNext(io.key_in) val number = RegInit(0.U(32.W)) when(state === sAccept){ number := (number<<3.U) + (number<<1.U) + in_buffer }.elsewhen(state === sEqual){ number := 0.U }.otherwise{ number := number } io.value.valid := Mux(state === sEqual,true.B,false.B) io.value.bits := number } ``` \u63a5\u8457\u57f7\u884c\u9019\u689d\u6307\u4ee4... shell= $ mill chiselModule.test.runMain aias_lab6.Lab2.IntGenTest \u7d50\u679c... Lab6-2-2 2 operands 1 operator Introduction \u63a5\u7e8c6-2-1\uff0c\u80fd\u5920\u7d44\u5408\u51fa\u6578\u5b57\u5f8c\uff0c\u63a5\u8457\u6839\u64da\u8f38\u5165\u7684\u904b\u7b97\u5b50\uff0c\u4f7f\u5169\u500b\u4e0d\u540c\u7684\u904b\u7b97\u5143\u53bb\u505a\u60f3\u8981\u7684\u904b\u7b97\u3002 Input\uff1a1 2 3 4 - 2 3 4 = Output\uff1a1000 State declaration sIdle \uff1areset\u4e2d\u3002 \u5207\u63db\u81f3sAccept\uff1areset\u8a0a\u865f\u7d50\u675f\u7684\u4e0b\u4e00\u523b\u96fb\u8def\u958b\u59cb\u904b\u4f5c\u3002 sSrc1 \uff1a\u63a5\u6536\u8f38\u5165\u4e26\u7d44\u5408Src1\u3002 \u5207\u63db\u81f3sOp\uff1a\u63a5\u6536\u5230\"+(10)\u3001-(11)\u3001*(12)\"\u6642 sOp \uff1a\u63a5\u6536\u8f38\u5165\u8a2d\u5b9a\u904b\u7b97\u65b9\u5f0f\u3002 \u5207\u63db\u81f3sSrc2\uff1a\u63a5\u6536\u5230\"0~9\"\u6642 sSrc2 \uff1a\u63a5\u6536\u8f38\u5165\u4e26\u7d44\u5408Src2\u3002 \u5207\u63db\u81f3sEqual\uff1a\u63a5\u6536\u5230\"=(15)\"\u6642 sEqual \uff1a \u6e05\u7a7anumber\u66ab\u5b58\u5668\uff0c\u4ee5\u6e96\u5099\u4e0b\u4e00\u6b21\u7684\u8f38\u5165\u3002 \u986f\u793a\u7d44\u5408\u51fa\u7684\u6578\u5b57\uff0c\u4e26\u5c07Valid\u8a0a\u865f\u8a2d\u70batrue\u3002 \u5207\u63db\u81f3sSrc1 Hardware Circuit Overview Lab6-2-2 EasyCal.scala code ```scala= class EasyCal extends Module{ val io = IO(new Bundle{ val key_in = Input(UInt(4.W)) val value = Output(Valid(UInt(32.W))) }) //Wire Declaration=================================== val operator = WireDefault(false.B) operator := io.key_in >= 10.U && io.key_in <= 12.U val num = WireDefault(false.B) num := io.key_in < 10.U val equal = WireDefault(false.B) equal := io.key_in === 15.U //Reg Declaration==================================== val in_buffer = RegNext(io.key_in) val src1 = RegInit(0.U(32.W)) val op = RegInit(0.U(2.W)) val src2 = RegInit(0.U(32.W)) //State and Constant Declaration===================== val sIdle :: sSrc1 :: sOp :: sSrc2 :: sEqual :: Nil = Enum(5) val add = 0.U val sub = 1.U val mul = 2.U val state = RegInit(sIdle) //Next State Decoder switch(state){ is(sIdle){ state := sSrc1 } is(sSrc1){ when(operator) {state := sOp} } is(sOp){ when(num) {state := sSrc2} } is(sSrc2){ when(equal) {state := sEqual} } is(sEqual){ state := sSrc1 } } //================================================== when(state === sSrc1){src1 := (src1<<3.U) + (src1<<1.U) + in_buffer} when(state === sSrc2){src2 := (src2<<3.U) + (src2<<1.U) + in_buffer} when(state === sOp){op := in_buffer - 10.U} when(state === sEqual){ src1 := 0.U src2 := 0.U op := 0.U } io.value.valid := Mux(state === sEqual,true.B,false.B) io.value.bits := MuxLookup(op,0.U,Seq( add -> (src1 + src2), sub -> (src1 - src2), mul -> (src1 * src2) )) } ``` :::success FSM\u53d7\u4ec0\u9ebc\u5f71\u97ff\u624d\u6539\u8b8a\u72c0\u614b? - [name=\u738b\u51f1\u5f18] ::: - \u63a5\u8457\u57f7\u884c\u9019\u689d\u6307\u4ee4... shell= $ mill chiselModule.test.runMain aias_lab6.Lab2.EasyCalTest - \u7d50\u679c... Lab6-3 LFSR (Linear Feedback Shift Register) Introduction \u6cbf\u7528\u4e86Lab2\u7684\u547d\u984c\uff0c\u9019\u88e1\u5c31\u4e0d\u518d\u591a\u505a\u8d05\u8ff0\uff0c\u76f4\u63a5\u53c3\u8003 Lab2 \u5c31\u597d\u4e86\uff01 \u6b64\u786c\u9ad4\u7684\u529f\u80fd\u5be6\u73fe\u8f03\u70ba\u5bb9\u6613\uff0c\u8a2d\u8a08\u4e5f\u8f03\u70ba\u81ea\u7531 shift reg\u7684\u9577\u5ea6(\u500b\u6578) tap\u6709\u591a\u5c11\u500b\uff0c\u4f4d\u7f6e Lab6-3-1 Fionacci version \u63d0\u4f9b\u7684\u7a0b\u5f0f\u78bc\uff0c\u8b93\u4f7f\u7528\u8005\u80fd\u5920\u6839\u64da\u50b3\u5165\u53c3\u6578(n)\u7684\u4e0d\u540c\u9078\u64c7(4\u30018)\u5169\u7a2e\u4e0d\u540csize\u7684lfsr --->Hardware Generator Lab3/LFSR_Fibonacci.scala code ```scala= object LfsrTaps { def apply(size: Int): Seq[Int] = { size match { // Seqp[Int] means the taps in LFSR case 4 => Seq(3) //p(x) = x 4+x 3+1 case 8 => Seq(6,5,4) //p(x) = x 8+x 6+x 5+x 4+1 case _ => throw new Exception(\"No LFSR taps stored for requested size\") } } } class LFSR_Fibonacci (n:Int)extends Module{ val io = IO(new Bundle{ val seed = Input(Valid(UInt(n.W))) val rndNum = Output(UInt(n.W)) }) //ShiftReg\u7684\u521d\u59cb\u5316 val shiftReg = RegInit(VecInit(Seq.fill(n)(false.B))) //\u50b3\u5165seed\uff0c\u5c07seed\u503c\u653e\u4e0aShiftReg when(io.seed.valid){ shiftReg zip io.seed.bits.asBools map {case(l,r) => l := r} }.otherwise{ //Barrel Shift Register (shiftReg.zipWithIndex).map{ case(sr,i) => sr := shiftReg((i+1)%n) } //Fibonacci LFSR shiftReg(n-1) := (LfsrTaps(n).map(x=>shiftReg(n-x)).reduce(_^_)) ^ shiftReg(0) } io.rndNum := shiftReg.asUInt } :::info - \u89e3\u91cb(Line 32)\uff1a - shiftReg(n-1)\u7684\u4e0b\u4e00\u500b\u503c\u4f86\u6e90\u548c\u5176\u4ed6\u7684\u66ab\u5b58\u5668\u4e0d\u540c\uff0c\u6240\u4ee5\u8986\u5beb\u6389\u4e0a\u9762barrel shifter\u5beb\u7684\uff0c\u8a18\u4f4f\uff1a\u5f8c\u5beb\u7684priority\u8f03\u5927\u3002 - LfsrTap(4)\uff0c\u6703\u56de\u50b3\u4e00Seq\uff0c\u70baSeq(3) - **map\u6307\u4ee4**\u70baHigher-order function\uff0cmap(x=>shiftReg(n-x))\u5c07Seq(3)\u8b8a\u6210\u4e86Seq(shiftReg(1)) - **reduce\u6307\u4ee4**\u4e5f\u540c\u70baHigher-order function\uff0c\u4e3b\u8981\u5de5\u4f5c\u70ba\u91dd\u5c0d\u96c6\u5408\u88e1\u7684\u6240\u6709\u5143\u7d20\u505a\u55ae\u4e00\u904b\u7b97(\u6bd4\u5982\u8aaasum\u3001&&)\uff0c\u5728\u6b64\u7bc4\u4f8b\u4e2d\u662f^(XOR)\uff0c\u6700\u5f8c\u6703\u532f\u96c6\u56de\u50b3\u4e00\u500b\u503c\u3002 ::: - \u63a5\u8457\u57f7\u884c\u9019\u689d\u6307\u4ee4... shell= $ mill chiselModule.test.runMain aias_lab6.Lab3.LFSR_FibonacciTest ``` - \u7d50\u679c... Lab6-3-2 Galois version \u53e6\u4e00\u7a2e\u7522\u751f\u96a8\u6a5f\u6578\u7684\u65b9\u5f0f \u786c\u9ad4\u5be6\u73fe\u7684\u512a\u9ede\uff1a\u6709\u8f03\u77ed\u7684critical path Lab3/LFSR_Galois.scala code ```scala= class LFSR_Galois (n:Int)extends Module{ val io = IO(new Bundle{ val seed = Input(Valid(UInt(n.W))) val rndNum = Output(UInt(n.W)) }) val shiftReg = RegInit(VecInit(Seq.fill(n)(false.B))) when(io.seed.valid){ shiftReg zip io.seed.bits.asBools map {case(l,r) => l := r} }.otherwise{ //Right Barrel Shift Register (shiftReg.zipWithIndex).map{ case(sr,i) => sr := shiftReg((i+1)%n) } //Galois LFSR LfsrTaps(n).map{x => {shiftReg(x-1) := shiftReg(x) ^ shiftReg(0)}} } io.rndNum := shiftReg.asUInt } :::info - \u4e0a\u9762\u5169\u500blab\u653e\u5728\u540c\u500bpackage\u88e1\u9762\uff0c\u6240\u4ee5\u76f4\u63a5\u5f15\u7528LfsrTaps(n)\u5373\u53ef\u3002 ::: - \u63a5\u8457\u57f7\u884c\u9019\u689d\u6307\u4ee4... shell= $ mill chiselModule.test.runMain aias_lab6.Lab3.LFSR_FibonacciTest ``` - \u7d50\u679c Hw6-1 TrafficLight with Pedestrian button Introduction Lab6-1\u505a\u51fa\u4e86\u50c5\u8003\u616e\u4e86\u5341\u5b57\u8def\u53e3\u4e2d\u7684\u6c34\u5e73\u4ee5\u53ca\u5782\u76f4\u8eca\u6d41\uff0c\u800c\u6b64\u9805\u4f5c\u696d\u5e0c\u671b\u540c\u5b78\u80fd\u5c07\u884c\u4eba\u901a\u884c\u7684\u72c0\u614b\u52a0\u5165\u81f3\u539f\u672c\u7684FSM\u4e2d\u3002\u4e26\u65b0\u589e\u4e86 \u884c\u4eba\u901a\u884c\u6309\u9215 \u7684\u529f\u80fd\u3002 \u884c\u4eba\u901a\u884c\u72c0\u614b( sPG )\uff0c\u8acb\u52a0\u5165\u81f3Lab6-1\u72c0\u614b\u5716\u4e2dsHRVY\u548csHGVR\u4e4b\u9593\uff0c\u4e14\u6642\u9577\u7531\u4e00\u65b0\u589e\u50b3\u5165\u53c3\u6578 Ptime \u6c7a\u5b9a\u3002 \u884c\u4eba\u901a\u884c\u6309\u9215 P_button \u529f\u80fd\u63cf\u8ff0\uff1a \u6309\u4e0b\u7576\u4e0b\u72c0\u614b\u975e\u884c\u4eba\u901a\u884c\u72c0\u614b(sPG)\uff1a\u7121\u8ad6\u5728\u54ea\u7a2e\u72c0\u614b\uff0c\u4e0b\u4e00\u523b\u7acb\u5373\u5207\u63db\u81f3\u884c\u4eba\u901a\u884c\u72c0\u614b\uff0c\u4e26\u7dad\u6301 Ptime \u6642\u9593\u3002\u7d50\u675f\u4e4b\u5f8c\uff0c\u4fbf\u5207\u56de\u6309\u4e0b\u6309\u9215\u90a3\u4e00\u523b\u7684\u72c0\u614b\uff0c\u91cd\u65b0\u5012\u6578\uff0c\u4e26\u7dad\u6301\u539f\u5148\u6392\u7a0b\u3002 Ex.\u6211\u5728sHGVR\u7684\u6642\u5019\u6309\u4e0b\u4e86p_button\uff0c\u5247\u4e0b\u4e00\u523b\u6703\u8b8a\u6210\u884c\u4eba\u901a\u884c\u72c0\u614b\u7dad\u6301 Ptime \u79d2\u5f8c\uff0c\u72c0\u614b\u5207\u56desHGVR\u4e14 \u91cd\u65b0\u5012\u6578 \uff0c\u6e96\u5099\u5207\u63db\u81f3sHYVR\u3002 \u6309\u4e0b\u7576\u4e0b\u72c0\u614b\u70ba\u884c\u4eba\u901a\u884c\u72c0\u614b(sPG)\uff1a\u4e26\u7121\u529f\u80fd\u3002 \u6e2c\u8a66\u8981\u6c42\uff1a \u96d6\u7136\u6642\u9577\u7531\u50b3\u5165\u53c3\u6578\u6c7a\u5b9a\uff0c\u4f46\u70ba\u4e86\u9a57\u8b49\u5404\u4f4d\u540c\u5b78\u7684\u96fb\u8def\u529f\u80fd\uff0c\u6642\u9577\u8a2d\u5b9a\u7d71\u4e00\u5982\u4e0b...\uff0c\u5b8c\u6574\u9031\u671f\u5171\u6703\u82b1\u8cbb25\u79d2\u3002\u9019\u90e8\u5206\u5df2\u5728tester\u4e2d\u8a2d\u5b9a\uff0c\u540c\u5b78\u4e0d\u7528\u505a\u4ec0\u9ebc\u66f4\u52d5\u3002 Ytime = 3 Gtime = 7 Ptime = 5 \u8acb\u540c\u5b78\u5728\u7e73\u4ea4\u6587\u4ef6\u4e0a\u9644\u4e0a vcd\u6a94\u622a\u5716 \u5169\u6bb5(\u4ee5\u4e0b\u8aaa\u660e)\uff0c\u5716\u4e0a\u81f3\u5c11\u9808\u5305\u542b\u4ee5\u4e0b\u4fe1\u865f... state timer H_traffic V_traffic P_traffic p_button \u5169\u6bb5\u622a\u5716\uff1a \u7b2c\u4e00\u6bb5\uff1a\u524d25\u500b\u9031\u671f\uff0c\u70ba\u4e0d\u53d7 P_button \u5e72\u64fe\u7684\u71c8\u865f\u904b\u884c\uff0c\u7406\u61c9\u98fd\u542b\u4e86\u7d05\u7da0\u71c8\u7684\u5b8c\u6574\u4e00\u6b21\u7684\u5faa\u74b0(\u517125\u500b\u9031\u671f)\u3002\u4ee5\u4e0b\u70ba\u622a\u5716\u793a\u7bc4... \u7b2c\u4e8c\u6bb5\uff1a\u5728 P_button \u7684\u5f71\u97ff\u4e0b\uff0c\u4e00\u6a23\u622a\u5716\u7d05\u7da0\u71c8\u904b\u884c\u7684\u5b8c\u6574\u9031\u671f(\u6703\u8f03\u9577...)\uff0c\u4ed4\u7d30\u770b P_button \u4e0d\u540c\u7684\u6642\u9593\u9ede\u7684\u89f8\u767c\u5c0d\u96fb\u8def\u7684\u5f71\u97ff\u3002 \u8a2d\u8a08\u65b9\u5f0f\u53ef\u4ee5\u548c\u52a9\u6559\u4e0d\u76f8\u540c \uff0c\u4f46\u8acb\u5728\u6587\u4ef6\u4e0a\u8aaa\u660e\u8a73\u7d30\uff0c\u5716\u4e0a\u7684\u8a0a\u865f\u8cc7\u8a0a\u3002 \u6bd4\u5982\u8aaa\u95dc\u65bcstate\u7684\u8f38\u51fa\u4fe1\u865f\u5206\u5225\u5c0d\u61c9\u4e86\u54ea\u500bstate\uff0c\u4ee5\u4e0a\u5716\u70ba\u4f8b\uff0c\u5728\u8aaa\u660e\u6587\u4ef6\u4e0a\u6211\u5c31\u6703\u9644\u4e0a\u4ee5\u4e0b\u8aaa\u660e\uff1a | state | map | | ----- | --- | | sIdle | 0 | | sHGVR | 1 | | sHYVR | 2 | | sHRVG | 3 | | sHRVY | 4 | | sPG | 5 | port declaration (\u53ef\u4ee5\u4ee5Lab6-1\u53bb\u505a\u66f4\u52d5\u5be6\u73fe) scala= class TrafficLight_p(Ytime:Int, Gtime:Int, Ptime:Int) extends Module{ val io = IO(new Bundle{ val P_button = Input(Bool()) val H_traffic = Output(UInt(2.W)) val V_traffic = Output(UInt(2.W)) val P_traffic = Output(UInt(2.W)) val timer = Output(UInt(5.W)) }) } Hw6-2 Calculator preface 6-1-(1~3)\uff1a\u6cbf\u7528Lab6-2\u5728\u4e0d\u540c\u72c0\u6cc1\u4e0b\u7684\u601d\u7dad\u8207\u8a2d\u8a08\uff0c\u4f7f\u8a08\u7b97\u6a5f\u7684\u529f\u80fd\u66f4\u52a0\u5b8c\u5584\u3002 :::danger \u6ce8\u610f\uff1a\u70ba\u56e0\u61c9\u591a\u689d\u6e2c\u8cc7\u7684\u53ef\u80fd\u6027\uff0c\u540c\u5b78\u5728\u8a2d\u8a08FSM\u7684\u6642\u5019\uff0c\u8f38\u51fa\u7b54\u6848\u7684\u4e0b\u4e00\u500b\u72c0\u614b\u61c9\u56de\u5fa9\u81f3\u6e96\u5099\u63a5\u6536\u4e0b\u4e00\u7b46\u6e2c\u8cc7\u7684\u72c0\u614b\uff0c\u5177\u9ad4\u8acb\u898bLab6-2 module \u4ee5\u53ca tester\u3002 ::: Hw6-2-1 Negative Integer Generator Introduction Lab6-2-1\u8b93\u540c\u5b78\u5be6\u4f5c\u51faNumber Generator\uff0c\u800c\u6b64\u9805\u4f5c\u696d\u5247\u8981\u6c42\u540c\u5b78\u80fd\u5920\u52a0\u4ee5\u6cbf\u7528\uff0c\u8b93\u8ca0\u6578\u4e5f\u4e00\u6a23\u80fd\u5920\u88ab\u7d44\u5408\u51fa\u4f86\uff0c\u540c\u6642\u4e5f\u80fd\u5411\u4e0b\u517c\u5bb9Lab6-2-1\u7684\u529f\u80fd\u3002 tester input //Situation 1 Input\uff1a( - 1 2 3 4 ) = Output\uff1a-1234 //Situation 2 Input\uff1a1 2 3 4 = Output\uff1a1234 :::warning \u8981\u6c42\uff1aHw6-1\u7684\u5be6\u4f5c\u4e2d\uff0c\u5c0d\u65bc\u8ca0\u6578\u7684\u683c\u5f0f\u8981\u6c42\uff0c\u5fc5\u9808 \u4ee5\u62ec\u865f\u5305\u8d77\u4f86 \uff0c\u96e3\u5ea6\u6703\u964d\u4f4e\u8a31\u591a\u3002 Hint\uff1a ( - 1 2 3 4 ) = \u6709\u4e9b\u90e8\u5206\u52e2\u5fc5\u5f97\u8a18\u4e0b\u4f86\uff0c\u624d\u53ef\u4ee5\u5f71\u97ff\u5982\u4f55\u5b58\u503c\u3002 ::: Hardware Circuit Overview Port declaration scala= class NegIntGen extends Module{ val io = IO(new Bundle{ val key_in = Input(UInt(4.W)) val value = Output(Valid(UInt(32.W))) }) } Hw6-2-2 N operands N-1 operators(+\u3001-) Introduction \u5728Lab6-2-2\u6211\u5011\u8003\u616e\u4e86\u5169\u500b\u904b\u7b97\u5143\u548c\u4e00\u500b\u904b\u7b97\u5b50\u7684\u72c0\u6cc1\uff0c\u672c\u6b21\u4f5c\u696d\u5e0c\u671b\u4ee5Lab\u70ba\u57fa\u5e95\uff0c\u5c07\u529f\u80fd\u5ef6\u4f38\u81f3N\u500b\u904b\u7b97\u5143{N:N>0}\u548cN-1\u500b\u904b\u7b97\u5b50\u7684\u8a08\u7b97\u3002\u4e26\u80fd\u5411\u4e0b\u517c\u5bb9Lab6-2\u4ee5\u53caHw6-1-1\u7684\u529f\u80fd\u3002 \u56db\u5247\u904b\u7b97 \u6700\u57fa\u672c\u7684\u4e09\u500b\u539f\u5247\uff1a \u5148\u4e58\u9664\u5f8c\u52a0\u6e1b -> \u8003\u616e\u5230operator priority \u62ec\u865f\u5167\u5148\u7b97 \u7531\u5de6\u7b97\u81f3\u53f3 \u6b64\u9805\u4f5c\u696d\u50c5\u8003\u616e\u7b2c\u4e09\u500b\u689d\u4ef6\u505a\u8655\u7406\uff0c\u8655\u7406\u9577\u7b97\u5f0f\u4e2d\u4e00\u7cfb\u5217\u7684 \u52a0\u6e1b\u904b\u7b97 \u3002 tester input //Situation 1 Input\uff1a11 + 12 + 3 + 14 + 15 + 16 = Output\uff1a71 //more difficult Input\uff1a1 - ( - 12 ) + 3 + 4 + 5 - ( - 6 ) = Output\uff1a31 //downward compatibility Input\uff1a( - 12 ) = Output\uff1a-12 Port declaration scala= class LongCal extends Module{ val io = IO(new Bundle{ val key_in = Input(UInt(4.W)) val value = Output(Valid(UInt(32.W))) }) } State Overview Hw6-2-3 Order of Operation (+\u3001-\u3001*\u3001(\u3001)) Introduction \u4e0d\u540c\u65bc\u524d\u9762\u7684Lab\uff0c\u5728 \u904b\u7b97\u5b50\u3001\u904b\u7b97\u5143\u7684\u6578\u91cf \u548c \u904b\u7b97\u9806\u5e8f \u7531\u5de6\u81f3\u53f3 \u90fd\u662f\u5df2\u77e5\u3001\u78ba\u5b9a\u7684\u60c5\u6cc1\u4e0b\uff0c\u81ea\u7136\u53ef\u4ee5\u7c21\u55ae\u5730\u7528state diagram\u4f86\u505a\u51fa\u8f38\u5165\u503c\u8a72\u5b58\u81f3\u54ea\u500b\u66ab\u5b58\u5668\u7684\u5340\u5206(sSrc1\u3001sOp\u3001sSrc2) \u6b64\u9805\u4f5c\u696d\u5e0c\u671b\u540c\u5b78\u5c07\u56db\u5247\u904b\u7b97\u7684\u4e09\u9805\u539f\u5247\u90fd\u8003\u616e\u9032\u4f86\uff0c\u5206\u6790\u5728\u4e00\u689d\u7b97\u5f0f\u4e2d\u904b\u7b97\u7684\u57f7\u884c\u9806\u5e8f\uff0c\u4e26\u5236\u5b9a\u5c0d\u61c9\u7684FSM\u3002 Order of Operation\uff1a Parentheses Exponents (right to left) \u6b64\u9805\u4f5c\u696d\u4e0d\u8003\u616e\uff0c\u5217\u51fa\u50c5\u4f9b\u53c3\u8003\u3002 right to left\u7684\u610f\u601d\u662f\u53f3\u908a\u7684\u512a\u5148\u6b0a\u6703\u9ad8\u65bc\u5de6\u908a\u7684 Ex: 2 ^ 3 ^ 2=2^9=512 Mutiplication (left to right) Addition and Subtraction (left to right) \u4eba\u985e\u5728\u89e3\u7b97\u5f0f\uff0c\u7fd2\u6163\u4ee5 \u4e2d\u5e8finfix \u65b9\u5f0f\u4f86\u89e3\u8b80\u4e26\u8a08\u7b97\uff0c\u4f46\u5c0d\u65bc\u96fb\u8166\u4f86\u8aaa\uff0c\u53d7\u9650\u65bc\u6f14\u7b97\u6cd5\u7121\u6cd5\u7d9c\u89c0\u4e26\u8655\u7406\u6574\u689d\u7b97\u5f0f\u7684\u7de3\u6545\uff0c\u7fd2\u6163\u5c07\u8868\u793a\u65b9\u5f0f\u8f49\u6210 \u5f8c\u5e8fpostfix \u5f8c\u518d\u4f5c\u904b\u7b97\u3002 reference \u3002 :::info Example\uff1a infix: 4+3+(-1)-6 postfix: 43+(-1)+6- \u8868\u793a\u65b9\u5f0f\u7684\u5c0f\u5c0f\u63d0\u9192\uff1a(-1)\u662f\u8996\u70ba\u4e00\u500b\u904b\u7b97\u5143\u5594!\u4e5f\u53ef\u4ee5\u5beb\u4f5c0xffffffff\uff0c\u4f46\u56e0\u70ba\u592a\u919c\u4e86\uff0c\u6240\u4ee5\u9019\u908a\u63d0\u9192\u4e00\u4e0b\uff0c\u62ec\u865f\u53ea\u662f\u8b93\u540c\u5b78\u597d\u5340\u5206\u8ca0\u6578\u6b63\u6578\uff0c\u4e0d\u8ad6\u662finfix\u9084\u662fpostfix\u90fd\u50c5\u8a18\u4e0b\u4e864\u500b\u904b\u7b97\u5143\u548c3\u500b\u904b\u7b97\u5b50\u3002 ::: \u9700\u8981\u91cd\u65b0\u8003\u616e\u7684\u6709\uff1a state\u7684\u8a2d\u8a08\u5283\u5206 \u5728infix2postfix\u4e4b\u4e2d\uff0cstack\u7684\u904b\u7528 \u53c3\u8003\u8cc7\u6e90\uff1achisel-tutorial/src/main/scala/examples/Stack.scala \u53ef\u4ee5\u81ea\u884c\u591a\u52a0 \u6a94\u6848 stack.scala\u4e26\u4f9d\u81ea\u5df1\u8a2d\u8a08\u505a\u66f4\u52d5\uff0c\u7e73\u56de\u4f5c\u696d\u6642\u4e00\u4f75\u4e0a\u50b3\u81f3gitlab\u5373\u53ef\u3002 \u82e5\u662f\u63a1\u7528\u5148\u5b58\u503c\u518d\u8655\u7406\u7684\u65b9\u5f0f\u3002\u7de8\u78bc\u885d\u7a81\u8a72\u5982\u4f55\u8655\u7406? \u904b\u7b97\u514310~15\u90fd\u6703\u9047\u5230\u548c\u7b26\u865f\u7de8\u78bc\u76f8\u885d\u7a81\uff0c\u8a72\u5982\u4f55\u89e3\u6c7a\u5462\uff1f \u8a2d\u8a08\u53c3\u8003\uff1a state\u5283\u5206\uff1a tester input //Situation Input\uff1a1 1 * ( 1 2 - 3 ) * 1 4 + ( 1 5 - ( - 1 6 ) )= postfix:?? Output:1417 Port declaration scala= class CpxCal extends Module{ val io = IO(new Bundle{ val key_in = Input(UInt(4.W)) val value = Output(Valid(UInt(32.W))) }) } :::info General Calculator \u6700\u5f8c\u505a\u51fa\u4f86\u7684\u8a08\u7b97\u6a5f\u61c9\u80fd\u5920\u517c\u5bb9\u524d\u9762\u6240\u6709Lab\u3001Hw\u5b83\u5011tester\u88e1\u9762\u7684\u7b97\u5f0f\u3002 ::: Bonus \u5728\u4e0d \u5f71\u97ff\u4f5c\u696d\u8981\u6c42 \u4ee5\u53ca \u66f4\u52d5\u539f\u672c\u7de8\u78bc \u7684\u60c5\u6cc1\u4e0b\uff0c\u540c\u5b78\u53ef\u4ee5\u9078\u64c7... \u5c07\u201c\uff3e\u201d\u529f\u80fd\u5be6\u73fe(Order of Operation 2.) \u8a18\u5f97\u8981\u64f4\u5145key_in\u7684bit\u6578\uff0c\u548ctester\u88e1\u9762\u7684dict \u81ea\u884c\u52a0\u5165\u7b97\u5f0f\u4f5c\u70ba\u6e2c\u503c\uff0c\u4e26\u5728\u7e73\u4ea4\u6587\u4ef6\u4e2d\u8a3b\u660e\u4f60\u6709\u505a\u5230\u7684\u984d\u5916\u529f\u80fd\u3002 \u7b97\u5f0f\u683c\u5f0f\uff1a \u5b57\u4e32\uff0c\u4e2d\u9593\u5fc5\u9808\u7121\u7a7a\u683c \u4ee5\u7b49\u865f\u505a\u7d50\u5c3e\uff0cex: \"(-15)-15-(-15)+(-15)=\" \u7b97\u5f0f\u8981\u5408\u7406\uff0c\u62ec\u865f\u6578\u91cf\u8981\u5c0d\uff01 \u4f7f\u529f\u80fd\u66f4\u4fbf\u5229... \u6bd4\u5982\u8aaa\uff0c\u8ca0\u6578\u53ef\u4ee5\u4e0d\u9700\u8981\u62ec\u865f\u5c31\u80fd\u5920\u5be6\u73fe\uff0c\u7576\u7136\u6709\u62ec\u865f\u7684\u9084\u662f\u5f97\u80fd\u5920\u6b63\u78ba \u4e00\u6a23\u5c07\u201c\u984d\u5916\u529f\u80fd\u201d\u5728\u8aaa\u660e\u6587\u4ef6\u4e0a\u8a3b\u660e\uff0c\u4e26\u52a0\u4e0a\u7b97\u5f0f\u5728tester\u4e2d\u3002 Hw6-3 LFSR-base 1A2B Number Guess Game preface \u5229\u7528Lab2\u7684LFSR(Linear feedback shift register)\uff0c\u4f5c\u70ba\u96a8\u6a5f\u6578\u5b57\u7522\u751f\u5668\uff0c\u4e26\u5c07\u5176\u61c9\u7528\u81f3\u7d93\u51781A2B(Bulls and Cows)\u3002 \u96fb\u8def\u884c\u70ba\u63cf\u8ff0\uff1a Reset\u5f8c\uff0cLFSR\u6839\u64daseed\u505a\u70ba\u521d\u59cb\u503c\uff0c\u6bcf\u4e00\u6b21clock\u505a\u4e00\u6b21shift\u3002 Gen\u70ba\u63a1\u6a23\u8a0a\u865f\uff0c\u62c9\u81f3High\u6642\uff0c\u6703\u63a1\u6a23LFSR\u7576\u4e0b \u8655\u7406\u597d \u7684\u503c(ex:1834)\u3002 <- Hw6-3-1 \u7576\u6578\u5217\u7522\u751f\u7121\u8aa4\u5f8c\uff0c ready \u8a0a\u865f\u6703\u62c9\u81f3High\u8b93\u4f7f\u7528\u8005\u77e5\u9053\u53ef\u4ee5\u958b\u59cb\u731c\u3002 Guess[15:0] \u70ba\u73a9\u5bb6\u7684\u8f38\u5165\uff0c\u548c\u984c\u76ee\u4e00\u6a23\u6bcf4\u500bbits\u4ee3\u8868\u4e00\u96a8\u6a5f\u6578\u3002 \u8f38\u5165 Guess \u5f8c\uff0c\u96fb\u8def\u958b\u59cb\u6bd4\u8f03 \u984c\u76ee \u4ee5\u53ca \u731c\u6e2c \uff0c ready \u8a0a\u865f\u6703\u62c9\u81f3Low\u3002\uff0c\u9664\u6b64\u4e4b\u5916\uff0c ready \u8a0a\u865f\u4e5f\u6703\u5728\u6700\u7d42\u7d50\u679c(\u5e7eA\u5e7eB)\u548c valid \u8f38\u51fa\u5f8c\u7684\u4e0b\u4e00\u523b\uff0c\u518d\u6b21\u62c9\u9ad8\u81f3High\u7b49\u5f85\u4e0b\u4e00\u7b46\u731c\u6e2c\u3002 \u8a08\u7b97\u5b8c\u6210\u5f8c\uff0c\u96fb\u8def\u6703\u5c07 valid \u8a0a\u865f\u62c9\u81f3High\uff0c\u4e26\u540c\u6642\u5c07\u5e7eA\u5e7eB\u7d50\u679c\u8f38\u51fa\u3002 \u7576\u8a08\u7b97\u7d50\u675f\u5f8c\uff0c\u9664\u975eA=4\uff0c\u5426\u5247\u96fb\u8def\u53c8\u6703\u5c07 ready\u8a0a\u865f \u62c9\u81f3High\uff0c\u7b49\u5f85\u4e0b\u4e00\u6b21\u7684\u731c\u6e2c\u3002 Hw6-3-1 Pseudo Random Number Generator :::warning [name=\u5f35\u5cfb\u8c6a] \u5728\u4f5c\u696d\u539f\u59cb\u78bc\u4e2d\uff0c\u6709\u95dc\u65bc io.puzzle \u4fe1\u865f\u7684\u521d\u59cb\u5316 \u539f\u672c\u7684\u7a0b\u5f0f\u78bc\u662f ```scala= io.puzzle := Vec(4, 0.U) \u4f46\u9019\u6a23\u7684\u5beb\u6cd5\u5728\u7de8\u8b6f\u7684\u6642\u5f8c\u6703\u5831\u932f\uff0c\u63d0\u793a \"chisel3.package$ExpectedChiselTypeException: vec type 'UInt<1>(0)' must be a Chisel type, not hardware\" \u6b63\u78ba\u7684\u5beb\u6cd5\u61c9\u6539\u6210\u5982\u4e0b ```scala= io.puzzle := VecInit(Seq.fill(4)(0.U(4.W))) \u61c9\u8a72\u5229\u7528 VecInit \u4f86\u521d\u59cb\u5316\uff0c\u800c\u975e\u76f4\u63a5\u7528 Vec Vec \u61c9\u4f5c\u70ba\u5ba3\u544a\u8a0a\u865f\u7dda\u6642 (without initialization) \u7684\u7528\u6cd5\uff0c\u5982\u679c\u8981\u8ce6\u503c\u5247\u8a72\u63a1\u7528 VecInit ::: Introduction \u4f5c\u696d\u8981\u6c42\uff1a \u8acb\u540c\u5b78\u5be6\u4f5c\u51fa\u4e0016 bits\u7684LFSR\uff0ctap\u7684\u6578\u91cf\u4ee5\u53ca\u64fa\u653e\u4f4d\u7f6e\u5982\u4e0b\u5716\u6240\u793a\u3002 \u4f5c\u70ba1A2B\u7684\u96a8\u6a5f\u6578\u5b57\u7522\u751f\u5668\uff0c\u4ee54 bits\u70ba\u4e00\u500b\u96a8\u6a5f\u7684\u6578\u5b57(\u51714\u500b)\u3002\u9700\u984d\u5916\u8003\u616e... \u96a8\u6a5f\u6578\u5b57\u7bc4\u570d\u70ba10~15\u6642\u8a72\u5982\u4f55\u8655\u7406? \u5c07\u6b64\u7bc4\u570d\u7684\u6578\u5b57\u4f9d\u9806\u5e8fmapping\u81f30~5 \u4ee5\u4e0a\u5716\u70ba\u4f8b\uff1aA C E 1 -> 0 2 4 1 \u6578\u5b57\u91cd\u8907\u6642\u8a72\u5982\u4f55\u8655\u7406\uff1f \u8acb\u540c\u5b78\u81ea\u884c\u8655\u7406\uff0c\u4e26\u5728\u8aaa\u660e\u6587\u4ef6\u4e2d\u8a73\u7d30\u95e1\u8ff0\u4f60\u6240\u4f7f\u7528\u7684\u65b9\u5f0f\u3002 port declaration scala= class PRNG(seed:Int) extends Module{ val io = IO(new Bundle{ val gen = Input(Bool()) val puzzle = Output(Vec(4,UInt(4.W))) val ready = Output(Bool()) }) } gen : \u89f8\u767c\u4fe1\u865f\uff0c\u7576\u8a0a\u865f\u70baHigh\u6642(\u6642\u9577\u70ba 1 clk)\uff0cmodule\u5fc5\u9808\u53d6\u6a23LFSR\u7684\u503c\uff0c\u4e26\u8655\u7406\u6210\u5408\u7406\u7684 \u984c\u76ee :::danger \u540c\u5b78\u5fc5\u9808\u89e3\u6c7a \u8d85\u904e\u7bc4\u570d \u3001 \u91cd\u8907\u503c \u9019\u4e9b\u554f\u984c ::: puzzle : \u51fa\u984c\u984c\u76ee\uff0c\u70ba4*4bits\u683c\u5f0f\uff0c\u4ee3\u8868\u6bcf\u500b\u96a8\u6a5f\u6578\uff0cindex\u7531\u5de6\u81f3\u53f3\u4f9d\u5e8f\u70ba3 2 1 0\u3002 ready : \u7576\u984c\u76ee\u8655\u7406\u597d\u6642\uff0c\u62c9\u9ad8\u81f3High\uff0c\u8b93 \u5916\u90e8 \u4f7f\u7528\u8005\u77e5\u9053\u984c\u76ee\u5df2\u7d93\u6e96\u5099\u597d\u4e86\u3002 tester\u9a57\u8b49\u65b9\u5f0f seed\u9810\u8a2d\u70ba1\uff0c\u540c\u5b78\u53ef\u4e0d\u5fc5\u5728\u610f\u3002 tester\u6703\u5728 \u96a8\u6a5f\u6642\u523b \u62c9\u8d77gen\u8a0a\u865f10\u6b21\u3002 \u6bcf\u4e00\u6b21\u90fd\u6703\u7b49\u5230\u984c\u76ee\u7522\u751f(ready\u81f3High\u6642)\u624d\u6703\u767c\u51fa\u4e0b\u4e00\u6b21\u7684gen\u8a0a\u865f\u3002 \u6aa2\u6e2c\u5167\u5bb9\uff1a \u6578\u5b57\u4e0d\u8d85\u904e\u7bc4\u570d(0~9) \u6578\u5b57\u4e0d\u91cd\u8907 \u6bcf\u6b21\u984c\u76ee\u4e0d\u91cd\u8907\u3002 \u5be6\u969b\u6aa2\u6e2c\u7d50\u679c\uff1a Hw6-3-2 1A2B game quiz Introduction \u63a5\u7e8c6-2-1\u7684\u984c\u76ee\u7522\u751f\u5668\uff0c6-2-2\u9700\u8981\u540c\u5b78\u80fd\u900f\u904e\u984c\u76ee(puzzle)\u548c\u731c\u6e2c(guess)\u5169\u500b\u8a0a\u865f\u6e90\u5be6\u73fe\u4e00\u6bd4\u8f03\u96fb\u8def\uff0c\u4e26\u8f38\u51fa\u6bd4\u8f03\u7d50\u679c(\u5e7eA\u5e7eB)\u3002 \u96fb\u8def\u884c\u70ba\u5982\u4e0b\u8aaa\u660e\uff1a tester\u6703\u505a\u7684\u4e8b\uff1a tester\u6703\u5728\u96a8\u6a5f\u6642\u523b\u62c9\u9ad8 gen \uff0cprng\u6703sample\u4e26\u8655\u7406\u597d\u984c\u76ee\u3002 prng\u7522\u751f\u597d\u984c\u76ee\u6642\uff0cready\u8a0a\u865f\u6703\u88ab\u62c9\u9ad8\u3002\u6b64\u6642tester\u6703\u8981\u6c42\u540c\u5b78\u7531\u5de6\u81f3\u53f3\u8f38\u5165\u731c\u6e2c\u5167\u5bb9\u3002 \u540c\u5b78\u9700\u5b8c\u6210\u7684\u4e8b\uff1a \u6bd4\u8f03\u5169\u8005\u5167\u5bb9\uff0c\u8f38\u51fa\u6bd4\u8f03\u7d50\u679c:\u5e7eA\u5e7eB \u6301\u7e8c\u8f38\u5165\u731c\u6e2c\u5167\u5bb9\u76f4\u81f3\u5f97\u52304A (\u653e\u5fc3\u4e00\u958b\u59cb\u6703\u5370\u51fa\u984c\u76ee...) \u9a57\u8b49\u6d41\u7a0b\u6f14\u793a\uff1a from teminal from vcd port declaration ```scala= class NumGuess(seed:Int = 1) extends Module{ require (seed > 0 , \"Seed cannot be 0\") val io = IO(new Bundle{ val gen = Input(Bool()) val guess = Input(UInt(16.W)) val puzzle = Output(Vec(4,UInt(4.W))) //for tester to print value... val ready = Output(Bool()) val valid = Output(Bool()) val A = Output(UInt(3.W)) val B = Output(UInt(3.W)) }) } ``` Bonus : 1A2B hardware solver Introduction 1. \u5c07\u81ea\u5df2\u7684\u89e3\u984c\u6280\u5de7implement\u81f3\u786c\u9ad4\u4e0a\uff0c\u5b8c\u6210solver.scala\u3002 - \u731c\u6e2c\u6578\u5b57\u53ef\u4ee5\u91cd\u8907\uff0cex:1 1 1 1 - \u5728\u6587\u4ef6\u4e2d\u63cf\u8ff0\u81ea\u5df1\u7684 \u89e3\u984c\u7b56\u7565 - port declaration scala= class Solver extends Module{ val io = IO(new Bundle{ val A = Input(UInt(3.W)) val B = Input(UInt(3.W)) val ready = Input(Bool()) val guess = Output(Vec(4,UInt(4.W))) val g_valid = Input(Bool()) val s_valid = Output(Bool()) val finish = Output(Bool()) //end signal }) } 2. \u5229\u7528top.scala\u5c07\u5169\u500bModule(NumGuess.scala\u548cSolver.scala)\u5305\u8d77\u4f86\uff0c\u63d0\u4f9b\u5169\u500b\u6a21\u584a\u7684\u4e92\u52d5\u74b0\u5883\u3002 - \u5169\u500bmodule\u9700\u4e92\u52d5\u76f4\u81f3A=4\uff0c finish =High - waveview for reference - port declaration and wiring ```scala= class top extends Module{ val io = IO(new Bundle{ val gen = Input(Bool()) val finish = Output(Bool()) }) val ng = Module(new NumGuess(1)) val ns = Module(new Solver()) ng.io.gen := io.gen ng.io.guess := ns.io.guess.asUInt ng.io.s_valid := ns.io.s_valid ns.io.A := ng.io.A ns.io.B := ng.io.B ns.io.ready := ng.io.ready ns.io.g_valid := ng.io.g_valid io.finish := ns.io.finish } ```","title":"Lab6 FSM Design"},{"location":"lab06/lab6/#lab6-fsm-design","text":"","title":"Lab6 FSM Design"},{"location":"lab06/lab6/#working-environment-setup","text":"## bring up the AIAS course docker container ## clone the lab6 files $ cd /workspace/projects $ git clone https://playlab.computing.ncku.edu.tw:4001/aias_spring_2022/Lab06.git Lab06 $ cd Lab06 ## add your private upstream repositories ## make sure you have create project repo under your gitlab account $ git remote add gitlab https://playlab.computing.ncku.edu.tw:4001/<your ldap name>/Lab06.git $ git remote -v gitlab https://playlab.computing.ncku.edu.tw:4001/<your ldap name>/Lab06.git ( fetch ) gitlab https://playlab.computing.ncku.edu.tw:4001/<your ldap name>/Lab06.git ( push ) origin https://playlab.computing.ncku.edu.tw:4001/aias_spring_2022/Lab06.git ( fetch ) origin https://playlab.computing.ncku.edu.tw:4001/aias_spring_2022/Lab06.git ( push ) Follow Create project and Manage Permission to create your own project repo. You can find both section in AIAS 2022 Git command reference When you are done with your code, you have to push your code back to your own gitlab account with the following command... ## the first time $ git push --set-upstream https://playlab.computing.ncku.edu.tw:4001/<your ldap name>/Lab06.git master ## after the first time $ git fetch origin master $ git push gitlab master File in Lab06 \u2500Lab06/ \u251c\u2500 .git and .gitignore \u251c\u2500 build.sh \u251c\u2500 build.sbt \u251c\u2500 build.sc \u2514\u2500 src/ \u251c\u2500main/ | \u2514\u2500scala/ | \u2514\u2500aias_lab6/ | \u251c\u2500Hw1/TrafficLight_p.scala | \u251c\u2500Hw2/ | | \u251c\u2500CpxCal.scala | | \u251c\u2500LongCal.scala | | \u2514\u2500NegIntGen.scala | \u251c\u2500Hw3/ | | \u251c\u2500PRNG.scala | | \u2514\u2500NumGuess.scala | \u251c\u2500Bonus/ | | \u251c\u2500Solver.scala | | \u2514\u2500top.scala | \u251c\u2500Lab1/ | | \u251c\u2500Counter.scala | | \u251c\u2500SevenSeg.scala | | \u2514\u2500TrafficLight.scala | \u251c\u2500Lab2/ | | \u251c\u2500EasyCal.scala | | \u2514\u2500IntGen.scala | \u2514\u2500Lab3/ | \u251c\u2500LFSR_Fibonacci.scala | \u2514\u2500LFSR_Galois.scala \u2514\u2500test/ \u2514\u2500scala/ \u2514\u2500aias_lab6/ \u251c\u2500Hw1/TrafficLight_pTest.scala \u251c\u2500Hw2/ | \u251c\u2500CpxCalTest.scala | \u251c\u2500LongCalTest.scala | \u2514\u2500NegIntGenTest.scala \u251c\u2500Hw3/ | \u251c\u2500PRNGTest.scala | \u2514\u2500NumGuessTest.scala \u251c\u2500Bonus/ | \u251c\u2500SolverTest.scala | \u2514\u2500topTest.scala \u251c\u2500Lab1/ | \u251c\u2500CounterTest.scala | \u2514\u2500TrafficLightTest.scala \u251c\u2500Lab2/ | \u251c\u2500EasyCalTest.scala | \u2514\u2500IntGenTest.scala \u2514\u2500Lab3/ \u251c\u2500LFSR_FibonacciTest.scala \u2514\u2500LFSR_GaloisTest.scala","title":"Working Environment Setup"},{"location":"lab06/lab6/#introduction","text":"\u5728\u8ab2\u5802\u4e0a\uff0c\u4ecb\u7d39\u4e86... \u96fb\u8def\u884c\u70ba\u7684\u72c0\u614b\u5716(State Transition Diagram)\u7e6a\u88fd\u4e26\u4ee5FSM\u7684\u65b9\u5f0f\u5be6\u73fe FSM\u7684\u57fa\u672c\u7d44\u6210 next state decoder (comb.) output decoder (comb.) state register (seq.) FSM\u7684\u5169\u5927\u6d3e\u5225 Mealey\uff1aoutput\u53ea\u548c\u7576\u524dstate\u76f8\u95dc\u3002 Moore\uff1aoutput\u548c\u7576\u524dstate\u4ee5\u53cainput\u76f8\u95dc\u3002 \u90a3\u5728\u9019\u6b21Lab\u4e2d\u4f60\u6703\u5b78\u7fd2\u5230\uff1a \u57fa\u672cFSM\u7684\u5beb\u6cd5\uff0c\u4e26\u4ee5\u4e4b\u5be6\u73fe\u8907\u96dc\u96fb\u8def\u529f\u80fd\u3002","title":"Introduction"},{"location":"lab06/lab6/#chisel-related-coding-skill","text":"Info \u5efa\u8b70\u540c\u5b78\u53ef\u4ee5\u5148\u770bchisel book\u7684FSM\u90e8\u5206\u3002 \u4ee5\u4e0b\u5217\u8209\u4e86\u4e00\u4e9b\u5728\u5be6\u4f5cFSM\u6642\u5e38\u7528\u5230\u7684\u8a9e\u6cd5 Enumeration from chisel3.util.Enum code ```scala= //\u8a18\u5f97\u8981import\u9019\u500blibrary import chisel3.util._ val sIdle :: sMonday :: sTuesday :: sWendsday :: Nil = Enum(4) //\u4f60\u4e5f\u53ef\u4ee5\u7528\u9010\u4e00\u5ba3\u544a\u7684\u65b9\u5f0f... val sIdle = 0.U val sMonday = 1.U ... - \u9084\u8a18\u5f97preview\uff0c\u6709\u653e\u4e0a\u5169\u7bc7\u4ecb\u7d39scala\u4e2d\u6709\u95dc\u5404\u5f0f**\u96c6\u5408**\u7684\u6587\u7ae0\u55ce\uff1f[1](https://blog.csdn.net/qq_34291505/article/details/86832500)\u548c[2](https://vvviy.github.io/2018/12/12/Learning-Chisel-and-Scala-Part-II/) - Enum(4)\u6703\u7de8\u865f\u5de6\u908alist\u4e2d\u6bcf\u500b\u5143\u7d20\uff0cDtype\u70baUInt\uff0c\u5f9e0.U\u958b\u59cb\u3002 - Nil\u70balist\u7684\u7d50\u5c3e\uff0c\u4e0d\u5305\u542b\u5728list\u7684\u201c\u9577\u5ea6\u201d\u4e2d\u3002 - \u6240\u4ee5\u5728\u4f60\u4f7f\u7528\u689d\u4ef6\u5224\u65b7\u6642\uff0c\u4e0b\u9762\u9019\u5169\u884c\u662f\u7b49\u50f9\u7684\uff0c\u4f46\u4e0a\u9762\u7684\u5224\u8b80\u6027\u5c31\u76f8\u5c0d\u8f03\u597d\u4e9b\u3002 chisel= when (state === sIdle){...} when (state === 0.U){...} 3. **Conditional block** 1. when-elsewhen-otherwise - format chisel= when(condition){ //behavior }.elsewhen(condition){ //behavior }.otherwise{ //default behavior } :::info - reminder - chisel\u4e2d\uff1a**\u7b49\u65bc**(**===**)\u548c**\u4e0d\u7b49\u65bc**(**=/=**) - elsewhen\u548cotherwise\u524d\u9762\u8981\u8a18\u5f97\u52a0\u4e0a\u9ede(.) ::: 3. switch-is - format chisel= // default behavior switch(\u5224\u65b7\u5c0d\u8c61){ is(condition){ //behavior } is(condition){ //behavior } ... } ``` :::info - reminder - switch-is\u672c\u8eab\u6c92\u6709\u53ef\u4ee5\u6c7a\u5b9a\u96fb\u8defdefault\u884c\u70ba\u7684\u5beb\u6cd5\uff0c\u6703\u5efa\u8b70\u5927\u5bb6\u5728 \u524d\u9762 \u88dc\u4e0adefault behavior\u3002 - \u88dc\u9f4a\u8a0a\u865f\u96a8\u689d\u4ef6\u6539\u8b8a\u7684\u5b8c\u6574\u6027\uff0c\u786c\u9ad4\u5408\u6210\u6642\u53ef\u4ee5\u6e1b\u5c11latch\u7684\u51fa\u73fe\u3002 - default\u5ba3\u544a\u5728\u524d\u9762\u662f\u56e0\u70bachisel\u662f\u8d8a \u5f8c\u9762 \u7684\u5ba3\u544apriority\u8d8a\u5927\u3002 :::","title":"Chisel-Related coding skill"},{"location":"lab06/lab6/#lab-61-traffic-light-and-7-segment-display-controller","text":"-","title":"Lab-6.1 Traffic Light and 7-segment display controller"},{"location":"lab06/lab6/#introduction_1","text":"Lab6-1\u70ba\u5be6\u4f5cFSM\u7d93\u5178\u547d\u984c\uff1a\u7d05\u7da0\u71c8\uff0c\u5229\u7528\u4e0a\u79ae\u62dc\u6559\u7684Hardware Generator\uff0c\u6c7a\u5b9a\u7da0\u71c8\u4ee5\u53ca\u9ec3\u71c8\u7684\u6642\u9577(\u5169\u8005\u52a0\u8d77\u4f86\u6642\u9577\u70ba\u7d05\u71c8)\uff0c\u4e26\u5c07\u5012\u6578\u6642\u9593\u4ee5\u4e03\u6bb5\u986f\u793a\u5668\u7684\u65b9\u5f0f\u5448\u73fe\u3002","title":"Introduction"},{"location":"lab06/lab6/#counter","text":"counter\u4e5f\u662f\u500b\u5c0f\u578b\u7684FSM\uff0c\u5b58\u503c\u4e00\u76f4\u52a0\u4e00\uff0c\u76f4\u5230\u6578\u5230\u6700\u5927\u9650\u5236\u6642\u6b78\u96f6\u3002 \u4f60\u7576\u7136\u53ef\u4ee5\u4f7f\u7528FSM\u4f86\u63cf\u8ff0counter\uff0c\u4f46\u5047\u8a2d\u8a2d\u8a08\u70ba0~7\uff0c\u90a3\u5c31\u6703\u67098\u500b\u72c0\u614b\u9700\u8981\u63cf\u8ff0\uff0c\u4f46\u90198\u500b\u72c0\u614b\u53c8\u67097\u500b\u884c\u70ba\u6a21\u5f0f\u7686\u76f8\u540c\uff0c\u5012\u4e0d\u5982\u76f4\u63a5\u63cf\u8ff0\u66ab\u5b58\u5668\u7684\u884c\u70ba\u5c31\u597d\u3002 Counter example code ```scala= counter = RegInit(0.U(3.W)) counter := Mux(counter===7.U,0.U,counter+1.U) //or when(counter===7.U){counter:=0.U} .otherwise{counter:=counter+1.U} ```","title":"Counter"},{"location":"lab06/lab6/#7-segment-display","text":"\u5c07\u5012\u6578\u6642\u9593\u5177\u73fe\u5316\u7684\u5de5\u5177 \u50c5\u7531Comb. circuit\u7d44\u6210\uff0c\u82e5\u5c07Counter\u8996\u70baFSM\uff0c\u90a3\u9ebc\u6b64\u90e8\u5206\u5373\u70baOutput Decoder a~g\u70ba\u6bcf\u4e00\u6bb5\u7684\u7de8\u865f\uff0c\u800c\u5f8c\u9762\u63a5\u7684\u6578\u5b57\u5247\u8868\u793a\u5728\u986f\u793a\u54ea\u6578\u5b57\u6642\u8a72\u6bb5\u9700\u8b8a\u4eae\u3002 a\uff1a0\u30012\u30013\u30015\u30016\u30017\u30018\u30019 b\uff1a0\u30011\u30012\u30013\u30014\u30017\u30018\u30019 c\uff1a0\u30011\u30013\u30014\u30015\u30016\u30017\u30018\u30019 d\uff1a0\u30012\u30013\u30015\u30016\u30018\u30019 e\uff1a0\u30012\u30016\u30018 f\uff1a0\u30014\u30015\u30016\u30018\u30019 g\uff1a2\u30013\u30014\u30015\u30016\u30018\u30019","title":"7-segment display"},{"location":"lab06/lab6/#implement","text":"port declaration Input None \u96fb\u8defreset\u5f8c\u5c31\u4e0d\u65b7\u958b\u59cb\u6578\uff0c\u7121\u5916\u754c\u56e0\u7d20\u5f71\u97ffFSM\u904b\u4f5c\u3002 Output H_traffic\uff1a\u6c34\u5e73\u8def\u6bb5\u7684\u71c8\u865f\u5448\u73fe(Off\uff1a0 Red\uff1a1 Yellow\uff1a2 Green\uff1a3) V_traffic\uff1a\u5782\u76f4\u8def\u6bb5\u7684\u71c8\u865f\u5448\u73fe(Off\uff1a0 Red\uff1a1 Yellow\uff1a2 Green\uff1a3) timer\uff1a\u5012\u6578\u8a08\u6642\u5668 display\uff1a\u4e03\u6bb5\u986f\u793a\u5668\u76847\u6bb5\u8a0a\u865f\u3002 state transition diagram Lab6-1 TrafficLight Code ```scala= class TrafficLight(Ytime:Int, Gtime:Int) extends Module{ val io = IO(new Bundle{ val H_traffic = Output(UInt(2.W)) val V_traffic = Output(UInt(2.W)) val timer = Output(UInt(5.W)) val display = Output(UInt(7.W)) }) //parameter declaration val Off = 0.U val Red = 1.U val Yellow = 2.U val Green = 3.U val sIdle :: sHGVR :: sHYVR :: sHRVG :: sHRVY :: Nil = Enum(5) //State register val state = RegInit(sIdle) //Counter============================ val cntMode = WireDefault(0.U(1.W)) val cntReg = RegInit(0.U(4.W)) val cntDone = Wire(Bool()) cntDone := cntReg === 0.U when(cntDone){ when(cntMode === 0.U){ cntReg := (Gtime-1).U }.elsewhen(cntMode === 1.U){ cntReg := (Ytime-1).U } }.otherwise{ cntReg := cntReg - 1.U } //Counter end======================== //Next State Decoder switch(state){ is(sIdle){ state := sHGVR } is(sHGVR){ when(cntDone) {state := sHYVR} } is(sHYVR){ when(cntDone) {state := sHRVG} } is(sHRVG){ when(cntDone) {state := sHRVY} } is(sHRVY){ when(cntDone) {state := sHGVR} } } //Output Decoder //Default statement cntMode := 0.U io.H_traffic := Off io.V_traffic := Off switch(state){ is(sHGVR){ cntMode := 1.U io.H_traffic := Green io.V_traffic := Red } is(sHYVR){ cntMode := 0.U io.H_traffic := Yellow io.V_traffic := Red } is(sHRVG){ cntMode := 1.U io.H_traffic := Red io.V_traffic := Green } is(sHRVY){ cntMode := 0.U io.H_traffic := Red io.V_traffic := Yellow } } io.timer := cntReg val ss = Module(new SevenSeg()) ss.io.num := cntReg io.display := ss.io.display } - \u63a5\u8457\u57f7\u884c\u9019\u689d\u6307\u4ee4... shell= $ mill chiselModule.test.runMain aias_lab6.Lab1.TrafficLightTest ``` - \u7d50\u679c... - \u7da0\u71c8\u6642\u9577\u5728tester\u88e1\u8a2d\u70ba7\uff0c\u70ba6~0 - \u9ec3\u71c8\u6642\u9577\u5728tester\u88e1\u8a2d\u70ba3\uff0c\u70ba2~0 :::warning - TrafficLight.scala\u884c\u70ba\u63cf\u8ff0 TrafficLight.scala\u5167\u90e8\u7684\u4e92\u52d5 [name=\u738b\u51f1\u5f18] :::","title":"Implement"},{"location":"lab06/lab6/#lab6-2-arithmetic-calculator","text":"","title":"Lab6-2 Arithmetic Calculator"},{"location":"lab06/lab6/#introduction_2","text":"\u6b64\u6b21 \u4f5c\u696d \u5e0c\u671b\u540c\u5b78\u53ef\u4ee5\u5be6\u73fe\u64c1\u6709\u52a0\u6e1b\u4e58\u529f\u80fd\u7684\u4e14\u9075\u5b88\u56db\u5247\u904b\u7b97\u898f\u5247\u7684\u8a08\u7b97\u6a5f\uff0c\u8f38\u5165\u7b97\u5f0f\u7684\u65b9\u5f0f\u6703\u4ee5series\u8f38\u5165\uff0c\u540c\u5b78\u9700\u6839\u64da\u4e0d\u540c\u7684\u96fb\u8def\u201d\u72c0\u614b\u201c\u4f86\u56e0\u61c9\u7576\u524d\u8f38\u5165\u4fe1\u865f\u7684\u8655\u7406\u3002 \u7531Lab6-2\u958b\u59cb\u5165\u9580\uff0c\u4f5c\u696d\u518d\u9032\u884c\u5f8c\u7e8c\u5ef6\u4f38\u3002 Level_1 Integer Generator Level_2 2 operands 1 operator(+\u3001-\u3001*) HomeWork Level_3 negative Integer Generator Level_4 N operands N-1 operators(+\u3001-) Level_5 Order of Operation (+\u3001-\u3001*\u3001(\u3001)) \u6578\u5b57\u9375\u7b26\u865f\u9375\u548c\u786c\u9ad4\u8f38\u5165\u8a0a\u865f\u7684mapping\uff0c\u525b\u597d4bits\u5c31\u80fd\u5b8c\u6574\u8868\u793a\u6211\u5011\u9700\u8981\u7684input\uff1a input HardWare 0 0x0 1 0x1 2 - 0x2 3 0x3 4 0x4 5 0x5 6 0x6 7 0x7 8 0x8 9 0x9 + 0xA - 0xB * 0xC ( 0xD ) 0xE = 0xF","title":"Introduction"},{"location":"lab06/lab6/#lab6-2-1-integer-generator","text":"","title":"Lab6-2-1 Integer Generator"},{"location":"lab06/lab6/#introduction_3","text":"\u4e00\u53f0\u529f\u80fd\u6b63\u5e38\u7684\u8a08\u7b97\u6a5f\uff0c\u7576\u4f60\u8f38\u5165\u5e38\u6578\u6309\u4e0b\u7b49\u865f\u5f8c\uff0c\u5fc5\u6703\u986f\u793a\u51fa\u525b\u525b\u8f38\u5165\u7684\u6578\u5b57\u3002 Input: 1 2 3 4 = Output: 1234 \u6b64\u6b21lab\u5e0c\u671b\u540c\u5b78\u80fd\u5920\u4f9d\u7167\u8f38\u5165\u9806\u5e8f\u7684\u6b0a\u91cd\u5c07\u8f38\u5165\u7d44\u5408\u6210\u671f\u671b\u7684\u6578\u5b57\u3002 State declaration sIdle \uff1areset\u4e2d\u3002 \u5207\u63db\u81f3sAccept\uff1areset\u8a0a\u865f\u7d50\u675f\u7684\u4e0b\u4e00\u523b\u96fb\u8def\u958b\u59cb\u904b\u4f5c\u3002 sAccept \uff1a\u63a5\u6536\u8f38\u5165\u4e26\u7d44\u5408\u6578\u5b57\u3002 \u5207\u63db\u81f3sEqual\uff1a\u63a5\u6536\u5230\"=(15)\"\u6642 sEqual \uff1a \u6e05\u7a7anumber\u66ab\u5b58\u5668\uff0c\u4ee5\u6e96\u5099\u4e0b\u4e00\u6b21\u7684\u8f38\u5165\u3002 \u986f\u793a\u7d44\u5408\u51fa\u7684\u6578\u5b57\uff0c\u4e26\u5c07Valid\u8a0a\u865f\u8a2d\u70batrue\u3002 \u518d\u6b21\u5207\u63db\u81f3sAccept\uff0c\u6e96\u5099\u958b\u59cb\u63a5\u53d7\u4e0b\u4e00\u7b46\u6e2c\u503c\u3002 :::info \u96fb\u8def\u8a2d\u8a08\u4e2d\uff0c\u96e3\u4ee5\u907f\u514d\u7684\u662fI/O port\u4e0a\u96a8\u6642\u90fd\u6709\u503c\uff0c\u53ea\u80fd\u4f9d\u9760 ready-valid\u5354\u8b70 \u4f86\u8b93\u5f7c\u6b64\u76f8\u9023\u7684\u5169\u500bblocks\u77e5\u9053\u76ee\u524d\u5728port\u4e0a\u7684\u8cc7\u6599\u662f\u5426\u53ef\u4ee5\u53d6\u7528\u3002 \u518d\u66f4\u8907\u96dc\u7684chisel\u8a2d\u8a08\u4e2d\uff0c\u5e38\u6703\u898b\u5f97\u5728I/O port\u8207Data type\u7684\u5ba3\u544a\u9593\uff0c\u591a\u5305\u4e86\u4e00\u5c64 Valid (\u6c92\u6709ready)\u3001\u6216\u8005\u662f DecoupledIO (\u5982\u4e0b\u9762\u7a0b\u5f0f\u78bc\u7684\u7b2c4\u884c)\uff0c\u4e00\u65e6\u5305\u4e0a\uff0c\u5728\u53d6\u503c\u4e0a\u6703\u8207\u539f\u672c\u7684\u8a9e\u6cd5\u6709\u4e9b\u4e0d\u540c\uff0c\u5fc5\u9808\u5f97\u591a\u52a0\u4e0a\u4ee5\u4e0b\u4e09\u9805\uff0c\u624d\u80fd\u53d6\u5230\u6216\u8ce6\u503c\u7d66\u4f60\u60f3\u8981\u7684wire(\u4e0b\u9762\u7a0b\u5f0f\u78bcLine36\u300137)\u3002 ready(input)\uff1a\u63a5\u53d7\u4f86\u81ea\u4e0b\u4e00\u7d1a\u7684ready\u8a0a\u865f\uff0c(\u4e0b\u4e00\u7d1a\u96fb\u8def)\u5411\u4e0a\u4e00\u7d1a\u6e96\u5099\u597d\u63a5\u53d7\u4e0b\u4e00\u7b46\u8cc7\u6599\u4e86\u3002 valid(output)\uff1a\u50b3\u905e\u7d66\u4e0b\u4e00\u7d1a\u8868\u793a\u76ee\u524dport\u4e0a\u9019\u7b46\u8cc7\u6599\u70ba\u53ef\u4ee5\u53d6\u7528\u3002 bits\uff1adata \u4e58\u4ee510\u7684\u5be6\u73fe\u65b9\u5f0f(line 29) \u96fb\u8def\u8a2d\u8a08\u4e2d\uff0c\u82e5\u5beb *10\uff0c\u4ee3\u50f9\u6703\u662f\u5408\u6210\u51fa\u4e00 \u4e58\u6cd5\u5668 \uff0c\u56b4\u91cd\u5f71\u97ff\u786c\u9ad4\u9762\u7a4d\u7684\u7f6a\u9b41\u798d\u9996...\u4e58\u6cd5\u5668\u7684\u51fa\u73fe\u61c9\u8a72\u53ea\u6709\u5728\u96fb\u8def\u9700\u8981\u5f88general\u7684\u4e58\u6cd5\u6642\u624d\u4e0d\u5f97\u4e0d\u51fa\u73fe(ex\uff1a\u5feb\u901f\u5085\u7acb\u8449\u8f49\u63db)\uff0c\u82e5\u55ae\u55ae\u53ea\u9700\u8981*10\uff0c\u61c9\u4ee5shift\u548cadd\u53d6\u800c\u4ee3\u4e4b\u3002 ::: :::info [name=\u5f35\u5cfb\u8c6a] DecoupledIO\u7684\u7528\u6cd5 Decoupled \u901a\u5e38\u7528\u65bc module \u8f38\u51fa\u7aef\u8a0a\u865f\u7684\u5ba3\u544a \u56e0\u70ba\u5982\u679c\u5229\u7528 Decoupled \u5ba3\u544a\u67d0\u4e00\u500b IO Port\uff0c\u5247 Chisel \u6703\u7de8\u8b6f\u751f\u6210\u4ee5\u4e0b\u96fb\u8def \u5176\u4e2d\u539f\u672c\u7684\u8f38\u51fa\u8a0a\u865f\u6703\u5305\u542b\u4ee5\u4e0b\u4e09\u500b\u90e8\u5206 io.outSignal.bits io.outSignal.valid io.outSignal.ready \u800c bits \u548c valid \u7684\u5c6c\u6027\u90fd\u662f Output \uff0c\u4f46\u8981\u6ce8\u610f ready \u7684\u5c6c\u6027\u70ba Intput \u3002\u901a\u5e38 ready \u8a0a\u865f\u6703\u63a5\u6536\u4e0b\u4e00\u7d1a\uff08next stage\uff09\u96fb\u8def\u50b3\u4f86\u7684 ready \u8a0a\u865f\uff0c\u53ea\u6709\u7576\u4e0b\u4e00\u7d1a\u96fb\u8def\u7684 ready \u8a0a\u865f\u548c\u76ee\u524d\u6a21\u7d44\u7684 valid \u8a0a\u865f\u540c\u70ba High \u6642\uff0c\u8a72\u6a21\u7d44\u7684\u8f38\u51fa\u4fe1\u865f\u624d\u6703\u88ab\u4e0b\u4e00\u7d1a\u96fb\u8def\u63a1\u7528 \uff08\u6240\u4ee5\u624d\u6703\u88ab\u7a31\u70ba\u63e1\u624b\u5354\u8b70\uff0c\u56e0\u70ba\u53ea\u6709\u7576\u6211\u7684 valid \u548c\u4ed6\u7684 ready \u90fd\u70ba High \u6642\uff0c\u6211\u7684\u8f38\u51fa\u624d\u6703\u88ab\u4ed6\u6240\u63a1\u7528\uff0c\u5c31\u50cf\u662f\u6211\u5011\u5169\u500b\u90fd\u5404\u81ea\u60f3\u548c\u5c0d\u65b9\u63e1\u624b\uff0c\u6211\u5011\u624d\u80fd\u63e1\u624b\u4e00\u6a23\u3002\uff09 \u5ba3\u544a IO Port \u7684\u6642\u5019\uff0c\u5229\u7528\u4ee5\u4e0b\u65b9\u5f0f\u5ba3\u544a scala= val io = IO(new Bundle{ outSignal = Decoupled(Output(Dtype(width.W))) // ... }) \u5176\u4e2d Dtype \u662f\u8a0a\u865f\u985e\u578b\uff0c\u4f8b\u5982 UInt \u3001 Bool \u7b49\u7b49... \u66f4\u591a\u7528\u6cd5\u8209\u4f8b\u53ef\u4ee5\u53c3\u8003\uff1a Decoupled\u7528\u6cd5 ::: :::info [name=\u5f35\u5cfb\u8c6a] \u4e58\u4ee5 10 \u65b9\u6cd5\u7684\u89e3\u91cb \u5728\u4e0b\u9762\u52a9\u6559\u7684\u7bc4\u4f8b\u7a0b\u5f0f\u88e1\u9762\u5beb\u5230 scala= number := (number<<3.U) + (number<<1.U) + in_buffer \u4ed6\u7684\u542b\u7fa9\u5176\u5be6\u5c31\u662f\uff0c\u5f80\u5de6 shift 3-bits \u7b49\u540c\u65bc\u4e58\u4ee58\uff0c\u800c\u5f80\u5de6 shift 1-bits \u7b49\u540c\u65bc\u4e58\u4ee52\uff0c\u6240\u4ee5\u5169\u8005\u76f8\u52a0\u5c31\u7b49\u50f9\u65bc\u4e58\u4ee510\u3002 ::: Hardware Circuit Overview Lab6-2-1 IntGen.scala code ```scala= class IntGen extends Module{ val io = IO(new Bundle{ val key_in = Input(UInt(4.W)) val value = Output(Valid(UInt(32.W))) }) val equal = WireDefault(false.B) equal := io.key_in === 15.U val sIdle :: sAccept :: sEqual :: Nil = Enum(3) val state = RegInit(sIdle) //Next State Decoder switch(state){ is(sIdle){ state := sAccept } is(sAccept){ when(equal) {state := sEqual} } is(sEqual){ state := sAccept } } val in_buffer = RegNext(io.key_in) val number = RegInit(0.U(32.W)) when(state === sAccept){ number := (number<<3.U) + (number<<1.U) + in_buffer }.elsewhen(state === sEqual){ number := 0.U }.otherwise{ number := number } io.value.valid := Mux(state === sEqual,true.B,false.B) io.value.bits := number } ``` \u63a5\u8457\u57f7\u884c\u9019\u689d\u6307\u4ee4... shell= $ mill chiselModule.test.runMain aias_lab6.Lab2.IntGenTest \u7d50\u679c...","title":"Introduction"},{"location":"lab06/lab6/#lab6-2-2-2-operands-1-operator","text":"","title":"Lab6-2-2 2 operands 1 operator"},{"location":"lab06/lab6/#introduction_4","text":"\u63a5\u7e8c6-2-1\uff0c\u80fd\u5920\u7d44\u5408\u51fa\u6578\u5b57\u5f8c\uff0c\u63a5\u8457\u6839\u64da\u8f38\u5165\u7684\u904b\u7b97\u5b50\uff0c\u4f7f\u5169\u500b\u4e0d\u540c\u7684\u904b\u7b97\u5143\u53bb\u505a\u60f3\u8981\u7684\u904b\u7b97\u3002 Input\uff1a1 2 3 4 - 2 3 4 = Output\uff1a1000 State declaration sIdle \uff1areset\u4e2d\u3002 \u5207\u63db\u81f3sAccept\uff1areset\u8a0a\u865f\u7d50\u675f\u7684\u4e0b\u4e00\u523b\u96fb\u8def\u958b\u59cb\u904b\u4f5c\u3002 sSrc1 \uff1a\u63a5\u6536\u8f38\u5165\u4e26\u7d44\u5408Src1\u3002 \u5207\u63db\u81f3sOp\uff1a\u63a5\u6536\u5230\"+(10)\u3001-(11)\u3001*(12)\"\u6642 sOp \uff1a\u63a5\u6536\u8f38\u5165\u8a2d\u5b9a\u904b\u7b97\u65b9\u5f0f\u3002 \u5207\u63db\u81f3sSrc2\uff1a\u63a5\u6536\u5230\"0~9\"\u6642 sSrc2 \uff1a\u63a5\u6536\u8f38\u5165\u4e26\u7d44\u5408Src2\u3002 \u5207\u63db\u81f3sEqual\uff1a\u63a5\u6536\u5230\"=(15)\"\u6642 sEqual \uff1a \u6e05\u7a7anumber\u66ab\u5b58\u5668\uff0c\u4ee5\u6e96\u5099\u4e0b\u4e00\u6b21\u7684\u8f38\u5165\u3002 \u986f\u793a\u7d44\u5408\u51fa\u7684\u6578\u5b57\uff0c\u4e26\u5c07Valid\u8a0a\u865f\u8a2d\u70batrue\u3002 \u5207\u63db\u81f3sSrc1 Hardware Circuit Overview Lab6-2-2 EasyCal.scala code ```scala= class EasyCal extends Module{ val io = IO(new Bundle{ val key_in = Input(UInt(4.W)) val value = Output(Valid(UInt(32.W))) }) //Wire Declaration=================================== val operator = WireDefault(false.B) operator := io.key_in >= 10.U && io.key_in <= 12.U val num = WireDefault(false.B) num := io.key_in < 10.U val equal = WireDefault(false.B) equal := io.key_in === 15.U //Reg Declaration==================================== val in_buffer = RegNext(io.key_in) val src1 = RegInit(0.U(32.W)) val op = RegInit(0.U(2.W)) val src2 = RegInit(0.U(32.W)) //State and Constant Declaration===================== val sIdle :: sSrc1 :: sOp :: sSrc2 :: sEqual :: Nil = Enum(5) val add = 0.U val sub = 1.U val mul = 2.U val state = RegInit(sIdle) //Next State Decoder switch(state){ is(sIdle){ state := sSrc1 } is(sSrc1){ when(operator) {state := sOp} } is(sOp){ when(num) {state := sSrc2} } is(sSrc2){ when(equal) {state := sEqual} } is(sEqual){ state := sSrc1 } } //================================================== when(state === sSrc1){src1 := (src1<<3.U) + (src1<<1.U) + in_buffer} when(state === sSrc2){src2 := (src2<<3.U) + (src2<<1.U) + in_buffer} when(state === sOp){op := in_buffer - 10.U} when(state === sEqual){ src1 := 0.U src2 := 0.U op := 0.U } io.value.valid := Mux(state === sEqual,true.B,false.B) io.value.bits := MuxLookup(op,0.U,Seq( add -> (src1 + src2), sub -> (src1 - src2), mul -> (src1 * src2) )) } ``` :::success FSM\u53d7\u4ec0\u9ebc\u5f71\u97ff\u624d\u6539\u8b8a\u72c0\u614b? - [name=\u738b\u51f1\u5f18] ::: - \u63a5\u8457\u57f7\u884c\u9019\u689d\u6307\u4ee4... shell= $ mill chiselModule.test.runMain aias_lab6.Lab2.EasyCalTest - \u7d50\u679c...","title":"Introduction"},{"location":"lab06/lab6/#lab6-3-lfsr-linear-feedback-shift-register","text":"","title":"Lab6-3 LFSR (Linear Feedback Shift Register)"},{"location":"lab06/lab6/#introduction_5","text":"\u6cbf\u7528\u4e86Lab2\u7684\u547d\u984c\uff0c\u9019\u88e1\u5c31\u4e0d\u518d\u591a\u505a\u8d05\u8ff0\uff0c\u76f4\u63a5\u53c3\u8003 Lab2 \u5c31\u597d\u4e86\uff01 \u6b64\u786c\u9ad4\u7684\u529f\u80fd\u5be6\u73fe\u8f03\u70ba\u5bb9\u6613\uff0c\u8a2d\u8a08\u4e5f\u8f03\u70ba\u81ea\u7531 shift reg\u7684\u9577\u5ea6(\u500b\u6578) tap\u6709\u591a\u5c11\u500b\uff0c\u4f4d\u7f6e","title":"Introduction"},{"location":"lab06/lab6/#lab6-3-1-fionacci-version","text":"\u63d0\u4f9b\u7684\u7a0b\u5f0f\u78bc\uff0c\u8b93\u4f7f\u7528\u8005\u80fd\u5920\u6839\u64da\u50b3\u5165\u53c3\u6578(n)\u7684\u4e0d\u540c\u9078\u64c7(4\u30018)\u5169\u7a2e\u4e0d\u540csize\u7684lfsr --->Hardware Generator Lab3/LFSR_Fibonacci.scala code ```scala= object LfsrTaps { def apply(size: Int): Seq[Int] = { size match { // Seqp[Int] means the taps in LFSR case 4 => Seq(3) //p(x) = x 4+x 3+1 case 8 => Seq(6,5,4) //p(x) = x 8+x 6+x 5+x 4+1 case _ => throw new Exception(\"No LFSR taps stored for requested size\") } } } class LFSR_Fibonacci (n:Int)extends Module{ val io = IO(new Bundle{ val seed = Input(Valid(UInt(n.W))) val rndNum = Output(UInt(n.W)) }) //ShiftReg\u7684\u521d\u59cb\u5316 val shiftReg = RegInit(VecInit(Seq.fill(n)(false.B))) //\u50b3\u5165seed\uff0c\u5c07seed\u503c\u653e\u4e0aShiftReg when(io.seed.valid){ shiftReg zip io.seed.bits.asBools map {case(l,r) => l := r} }.otherwise{ //Barrel Shift Register (shiftReg.zipWithIndex).map{ case(sr,i) => sr := shiftReg((i+1)%n) } //Fibonacci LFSR shiftReg(n-1) := (LfsrTaps(n).map(x=>shiftReg(n-x)).reduce(_^_)) ^ shiftReg(0) } io.rndNum := shiftReg.asUInt } :::info - \u89e3\u91cb(Line 32)\uff1a - shiftReg(n-1)\u7684\u4e0b\u4e00\u500b\u503c\u4f86\u6e90\u548c\u5176\u4ed6\u7684\u66ab\u5b58\u5668\u4e0d\u540c\uff0c\u6240\u4ee5\u8986\u5beb\u6389\u4e0a\u9762barrel shifter\u5beb\u7684\uff0c\u8a18\u4f4f\uff1a\u5f8c\u5beb\u7684priority\u8f03\u5927\u3002 - LfsrTap(4)\uff0c\u6703\u56de\u50b3\u4e00Seq\uff0c\u70baSeq(3) - **map\u6307\u4ee4**\u70baHigher-order function\uff0cmap(x=>shiftReg(n-x))\u5c07Seq(3)\u8b8a\u6210\u4e86Seq(shiftReg(1)) - **reduce\u6307\u4ee4**\u4e5f\u540c\u70baHigher-order function\uff0c\u4e3b\u8981\u5de5\u4f5c\u70ba\u91dd\u5c0d\u96c6\u5408\u88e1\u7684\u6240\u6709\u5143\u7d20\u505a\u55ae\u4e00\u904b\u7b97(\u6bd4\u5982\u8aaasum\u3001&&)\uff0c\u5728\u6b64\u7bc4\u4f8b\u4e2d\u662f^(XOR)\uff0c\u6700\u5f8c\u6703\u532f\u96c6\u56de\u50b3\u4e00\u500b\u503c\u3002 ::: - \u63a5\u8457\u57f7\u884c\u9019\u689d\u6307\u4ee4... shell= $ mill chiselModule.test.runMain aias_lab6.Lab3.LFSR_FibonacciTest ``` - \u7d50\u679c...","title":"Lab6-3-1 Fionacci version"},{"location":"lab06/lab6/#lab6-3-2-galois-version","text":"\u53e6\u4e00\u7a2e\u7522\u751f\u96a8\u6a5f\u6578\u7684\u65b9\u5f0f \u786c\u9ad4\u5be6\u73fe\u7684\u512a\u9ede\uff1a\u6709\u8f03\u77ed\u7684critical path Lab3/LFSR_Galois.scala code ```scala= class LFSR_Galois (n:Int)extends Module{ val io = IO(new Bundle{ val seed = Input(Valid(UInt(n.W))) val rndNum = Output(UInt(n.W)) }) val shiftReg = RegInit(VecInit(Seq.fill(n)(false.B))) when(io.seed.valid){ shiftReg zip io.seed.bits.asBools map {case(l,r) => l := r} }.otherwise{ //Right Barrel Shift Register (shiftReg.zipWithIndex).map{ case(sr,i) => sr := shiftReg((i+1)%n) } //Galois LFSR LfsrTaps(n).map{x => {shiftReg(x-1) := shiftReg(x) ^ shiftReg(0)}} } io.rndNum := shiftReg.asUInt } :::info - \u4e0a\u9762\u5169\u500blab\u653e\u5728\u540c\u500bpackage\u88e1\u9762\uff0c\u6240\u4ee5\u76f4\u63a5\u5f15\u7528LfsrTaps(n)\u5373\u53ef\u3002 ::: - \u63a5\u8457\u57f7\u884c\u9019\u689d\u6307\u4ee4... shell= $ mill chiselModule.test.runMain aias_lab6.Lab3.LFSR_FibonacciTest ``` - \u7d50\u679c","title":"Lab6-3-2 Galois version"},{"location":"lab06/lab6/#hw6-1-trafficlight-with-pedestrian-button","text":"","title":"Hw6-1 TrafficLight with Pedestrian button"},{"location":"lab06/lab6/#introduction_6","text":"Lab6-1\u505a\u51fa\u4e86\u50c5\u8003\u616e\u4e86\u5341\u5b57\u8def\u53e3\u4e2d\u7684\u6c34\u5e73\u4ee5\u53ca\u5782\u76f4\u8eca\u6d41\uff0c\u800c\u6b64\u9805\u4f5c\u696d\u5e0c\u671b\u540c\u5b78\u80fd\u5c07\u884c\u4eba\u901a\u884c\u7684\u72c0\u614b\u52a0\u5165\u81f3\u539f\u672c\u7684FSM\u4e2d\u3002\u4e26\u65b0\u589e\u4e86 \u884c\u4eba\u901a\u884c\u6309\u9215 \u7684\u529f\u80fd\u3002 \u884c\u4eba\u901a\u884c\u72c0\u614b( sPG )\uff0c\u8acb\u52a0\u5165\u81f3Lab6-1\u72c0\u614b\u5716\u4e2dsHRVY\u548csHGVR\u4e4b\u9593\uff0c\u4e14\u6642\u9577\u7531\u4e00\u65b0\u589e\u50b3\u5165\u53c3\u6578 Ptime \u6c7a\u5b9a\u3002 \u884c\u4eba\u901a\u884c\u6309\u9215 P_button \u529f\u80fd\u63cf\u8ff0\uff1a \u6309\u4e0b\u7576\u4e0b\u72c0\u614b\u975e\u884c\u4eba\u901a\u884c\u72c0\u614b(sPG)\uff1a\u7121\u8ad6\u5728\u54ea\u7a2e\u72c0\u614b\uff0c\u4e0b\u4e00\u523b\u7acb\u5373\u5207\u63db\u81f3\u884c\u4eba\u901a\u884c\u72c0\u614b\uff0c\u4e26\u7dad\u6301 Ptime \u6642\u9593\u3002\u7d50\u675f\u4e4b\u5f8c\uff0c\u4fbf\u5207\u56de\u6309\u4e0b\u6309\u9215\u90a3\u4e00\u523b\u7684\u72c0\u614b\uff0c\u91cd\u65b0\u5012\u6578\uff0c\u4e26\u7dad\u6301\u539f\u5148\u6392\u7a0b\u3002 Ex.\u6211\u5728sHGVR\u7684\u6642\u5019\u6309\u4e0b\u4e86p_button\uff0c\u5247\u4e0b\u4e00\u523b\u6703\u8b8a\u6210\u884c\u4eba\u901a\u884c\u72c0\u614b\u7dad\u6301 Ptime \u79d2\u5f8c\uff0c\u72c0\u614b\u5207\u56desHGVR\u4e14 \u91cd\u65b0\u5012\u6578 \uff0c\u6e96\u5099\u5207\u63db\u81f3sHYVR\u3002 \u6309\u4e0b\u7576\u4e0b\u72c0\u614b\u70ba\u884c\u4eba\u901a\u884c\u72c0\u614b(sPG)\uff1a\u4e26\u7121\u529f\u80fd\u3002 \u6e2c\u8a66\u8981\u6c42\uff1a \u96d6\u7136\u6642\u9577\u7531\u50b3\u5165\u53c3\u6578\u6c7a\u5b9a\uff0c\u4f46\u70ba\u4e86\u9a57\u8b49\u5404\u4f4d\u540c\u5b78\u7684\u96fb\u8def\u529f\u80fd\uff0c\u6642\u9577\u8a2d\u5b9a\u7d71\u4e00\u5982\u4e0b...\uff0c\u5b8c\u6574\u9031\u671f\u5171\u6703\u82b1\u8cbb25\u79d2\u3002\u9019\u90e8\u5206\u5df2\u5728tester\u4e2d\u8a2d\u5b9a\uff0c\u540c\u5b78\u4e0d\u7528\u505a\u4ec0\u9ebc\u66f4\u52d5\u3002 Ytime = 3 Gtime = 7 Ptime = 5 \u8acb\u540c\u5b78\u5728\u7e73\u4ea4\u6587\u4ef6\u4e0a\u9644\u4e0a vcd\u6a94\u622a\u5716 \u5169\u6bb5(\u4ee5\u4e0b\u8aaa\u660e)\uff0c\u5716\u4e0a\u81f3\u5c11\u9808\u5305\u542b\u4ee5\u4e0b\u4fe1\u865f... state timer H_traffic V_traffic P_traffic p_button \u5169\u6bb5\u622a\u5716\uff1a \u7b2c\u4e00\u6bb5\uff1a\u524d25\u500b\u9031\u671f\uff0c\u70ba\u4e0d\u53d7 P_button \u5e72\u64fe\u7684\u71c8\u865f\u904b\u884c\uff0c\u7406\u61c9\u98fd\u542b\u4e86\u7d05\u7da0\u71c8\u7684\u5b8c\u6574\u4e00\u6b21\u7684\u5faa\u74b0(\u517125\u500b\u9031\u671f)\u3002\u4ee5\u4e0b\u70ba\u622a\u5716\u793a\u7bc4... \u7b2c\u4e8c\u6bb5\uff1a\u5728 P_button \u7684\u5f71\u97ff\u4e0b\uff0c\u4e00\u6a23\u622a\u5716\u7d05\u7da0\u71c8\u904b\u884c\u7684\u5b8c\u6574\u9031\u671f(\u6703\u8f03\u9577...)\uff0c\u4ed4\u7d30\u770b P_button \u4e0d\u540c\u7684\u6642\u9593\u9ede\u7684\u89f8\u767c\u5c0d\u96fb\u8def\u7684\u5f71\u97ff\u3002 \u8a2d\u8a08\u65b9\u5f0f\u53ef\u4ee5\u548c\u52a9\u6559\u4e0d\u76f8\u540c \uff0c\u4f46\u8acb\u5728\u6587\u4ef6\u4e0a\u8aaa\u660e\u8a73\u7d30\uff0c\u5716\u4e0a\u7684\u8a0a\u865f\u8cc7\u8a0a\u3002 \u6bd4\u5982\u8aaa\u95dc\u65bcstate\u7684\u8f38\u51fa\u4fe1\u865f\u5206\u5225\u5c0d\u61c9\u4e86\u54ea\u500bstate\uff0c\u4ee5\u4e0a\u5716\u70ba\u4f8b\uff0c\u5728\u8aaa\u660e\u6587\u4ef6\u4e0a\u6211\u5c31\u6703\u9644\u4e0a\u4ee5\u4e0b\u8aaa\u660e\uff1a | state | map | | ----- | --- | | sIdle | 0 | | sHGVR | 1 | | sHYVR | 2 | | sHRVG | 3 | | sHRVY | 4 | | sPG | 5 | port declaration (\u53ef\u4ee5\u4ee5Lab6-1\u53bb\u505a\u66f4\u52d5\u5be6\u73fe) scala= class TrafficLight_p(Ytime:Int, Gtime:Int, Ptime:Int) extends Module{ val io = IO(new Bundle{ val P_button = Input(Bool()) val H_traffic = Output(UInt(2.W)) val V_traffic = Output(UInt(2.W)) val P_traffic = Output(UInt(2.W)) val timer = Output(UInt(5.W)) }) }","title":"Introduction"},{"location":"lab06/lab6/#hw6-2-calculator","text":"","title":"Hw6-2 Calculator"},{"location":"lab06/lab6/#preface","text":"6-1-(1~3)\uff1a\u6cbf\u7528Lab6-2\u5728\u4e0d\u540c\u72c0\u6cc1\u4e0b\u7684\u601d\u7dad\u8207\u8a2d\u8a08\uff0c\u4f7f\u8a08\u7b97\u6a5f\u7684\u529f\u80fd\u66f4\u52a0\u5b8c\u5584\u3002 :::danger \u6ce8\u610f\uff1a\u70ba\u56e0\u61c9\u591a\u689d\u6e2c\u8cc7\u7684\u53ef\u80fd\u6027\uff0c\u540c\u5b78\u5728\u8a2d\u8a08FSM\u7684\u6642\u5019\uff0c\u8f38\u51fa\u7b54\u6848\u7684\u4e0b\u4e00\u500b\u72c0\u614b\u61c9\u56de\u5fa9\u81f3\u6e96\u5099\u63a5\u6536\u4e0b\u4e00\u7b46\u6e2c\u8cc7\u7684\u72c0\u614b\uff0c\u5177\u9ad4\u8acb\u898bLab6-2 module \u4ee5\u53ca tester\u3002 :::","title":"preface"},{"location":"lab06/lab6/#hw6-2-1-negative-integer-generator","text":"","title":"Hw6-2-1 Negative Integer Generator"},{"location":"lab06/lab6/#introduction_7","text":"Lab6-2-1\u8b93\u540c\u5b78\u5be6\u4f5c\u51faNumber Generator\uff0c\u800c\u6b64\u9805\u4f5c\u696d\u5247\u8981\u6c42\u540c\u5b78\u80fd\u5920\u52a0\u4ee5\u6cbf\u7528\uff0c\u8b93\u8ca0\u6578\u4e5f\u4e00\u6a23\u80fd\u5920\u88ab\u7d44\u5408\u51fa\u4f86\uff0c\u540c\u6642\u4e5f\u80fd\u5411\u4e0b\u517c\u5bb9Lab6-2-1\u7684\u529f\u80fd\u3002 tester input //Situation 1 Input\uff1a( - 1 2 3 4 ) = Output\uff1a-1234 //Situation 2 Input\uff1a1 2 3 4 = Output\uff1a1234 :::warning \u8981\u6c42\uff1aHw6-1\u7684\u5be6\u4f5c\u4e2d\uff0c\u5c0d\u65bc\u8ca0\u6578\u7684\u683c\u5f0f\u8981\u6c42\uff0c\u5fc5\u9808 \u4ee5\u62ec\u865f\u5305\u8d77\u4f86 \uff0c\u96e3\u5ea6\u6703\u964d\u4f4e\u8a31\u591a\u3002 Hint\uff1a ( - 1 2 3 4 ) = \u6709\u4e9b\u90e8\u5206\u52e2\u5fc5\u5f97\u8a18\u4e0b\u4f86\uff0c\u624d\u53ef\u4ee5\u5f71\u97ff\u5982\u4f55\u5b58\u503c\u3002 ::: Hardware Circuit Overview Port declaration scala= class NegIntGen extends Module{ val io = IO(new Bundle{ val key_in = Input(UInt(4.W)) val value = Output(Valid(UInt(32.W))) }) }","title":"Introduction"},{"location":"lab06/lab6/#hw6-2-2-n-operands-n-1-operators-","text":"","title":"Hw6-2-2 N operands N-1 operators(+\u3001-)"},{"location":"lab06/lab6/#introduction_8","text":"\u5728Lab6-2-2\u6211\u5011\u8003\u616e\u4e86\u5169\u500b\u904b\u7b97\u5143\u548c\u4e00\u500b\u904b\u7b97\u5b50\u7684\u72c0\u6cc1\uff0c\u672c\u6b21\u4f5c\u696d\u5e0c\u671b\u4ee5Lab\u70ba\u57fa\u5e95\uff0c\u5c07\u529f\u80fd\u5ef6\u4f38\u81f3N\u500b\u904b\u7b97\u5143{N:N>0}\u548cN-1\u500b\u904b\u7b97\u5b50\u7684\u8a08\u7b97\u3002\u4e26\u80fd\u5411\u4e0b\u517c\u5bb9Lab6-2\u4ee5\u53caHw6-1-1\u7684\u529f\u80fd\u3002 \u56db\u5247\u904b\u7b97 \u6700\u57fa\u672c\u7684\u4e09\u500b\u539f\u5247\uff1a \u5148\u4e58\u9664\u5f8c\u52a0\u6e1b -> \u8003\u616e\u5230operator priority \u62ec\u865f\u5167\u5148\u7b97 \u7531\u5de6\u7b97\u81f3\u53f3 \u6b64\u9805\u4f5c\u696d\u50c5\u8003\u616e\u7b2c\u4e09\u500b\u689d\u4ef6\u505a\u8655\u7406\uff0c\u8655\u7406\u9577\u7b97\u5f0f\u4e2d\u4e00\u7cfb\u5217\u7684 \u52a0\u6e1b\u904b\u7b97 \u3002 tester input //Situation 1 Input\uff1a11 + 12 + 3 + 14 + 15 + 16 = Output\uff1a71 //more difficult Input\uff1a1 - ( - 12 ) + 3 + 4 + 5 - ( - 6 ) = Output\uff1a31 //downward compatibility Input\uff1a( - 12 ) = Output\uff1a-12 Port declaration scala= class LongCal extends Module{ val io = IO(new Bundle{ val key_in = Input(UInt(4.W)) val value = Output(Valid(UInt(32.W))) }) } State Overview","title":"Introduction"},{"location":"lab06/lab6/#hw6-2-3-order-of-operation-","text":"","title":"Hw6-2-3 Order of Operation (+\u3001-\u3001*\u3001(\u3001))"},{"location":"lab06/lab6/#introduction_9","text":"\u4e0d\u540c\u65bc\u524d\u9762\u7684Lab\uff0c\u5728 \u904b\u7b97\u5b50\u3001\u904b\u7b97\u5143\u7684\u6578\u91cf \u548c \u904b\u7b97\u9806\u5e8f \u7531\u5de6\u81f3\u53f3 \u90fd\u662f\u5df2\u77e5\u3001\u78ba\u5b9a\u7684\u60c5\u6cc1\u4e0b\uff0c\u81ea\u7136\u53ef\u4ee5\u7c21\u55ae\u5730\u7528state diagram\u4f86\u505a\u51fa\u8f38\u5165\u503c\u8a72\u5b58\u81f3\u54ea\u500b\u66ab\u5b58\u5668\u7684\u5340\u5206(sSrc1\u3001sOp\u3001sSrc2) \u6b64\u9805\u4f5c\u696d\u5e0c\u671b\u540c\u5b78\u5c07\u56db\u5247\u904b\u7b97\u7684\u4e09\u9805\u539f\u5247\u90fd\u8003\u616e\u9032\u4f86\uff0c\u5206\u6790\u5728\u4e00\u689d\u7b97\u5f0f\u4e2d\u904b\u7b97\u7684\u57f7\u884c\u9806\u5e8f\uff0c\u4e26\u5236\u5b9a\u5c0d\u61c9\u7684FSM\u3002 Order of Operation\uff1a Parentheses Exponents (right to left) \u6b64\u9805\u4f5c\u696d\u4e0d\u8003\u616e\uff0c\u5217\u51fa\u50c5\u4f9b\u53c3\u8003\u3002 right to left\u7684\u610f\u601d\u662f\u53f3\u908a\u7684\u512a\u5148\u6b0a\u6703\u9ad8\u65bc\u5de6\u908a\u7684 Ex: 2 ^ 3 ^ 2=2^9=512 Mutiplication (left to right) Addition and Subtraction (left to right) \u4eba\u985e\u5728\u89e3\u7b97\u5f0f\uff0c\u7fd2\u6163\u4ee5 \u4e2d\u5e8finfix \u65b9\u5f0f\u4f86\u89e3\u8b80\u4e26\u8a08\u7b97\uff0c\u4f46\u5c0d\u65bc\u96fb\u8166\u4f86\u8aaa\uff0c\u53d7\u9650\u65bc\u6f14\u7b97\u6cd5\u7121\u6cd5\u7d9c\u89c0\u4e26\u8655\u7406\u6574\u689d\u7b97\u5f0f\u7684\u7de3\u6545\uff0c\u7fd2\u6163\u5c07\u8868\u793a\u65b9\u5f0f\u8f49\u6210 \u5f8c\u5e8fpostfix \u5f8c\u518d\u4f5c\u904b\u7b97\u3002 reference \u3002 :::info Example\uff1a infix: 4+3+(-1)-6 postfix: 43+(-1)+6- \u8868\u793a\u65b9\u5f0f\u7684\u5c0f\u5c0f\u63d0\u9192\uff1a(-1)\u662f\u8996\u70ba\u4e00\u500b\u904b\u7b97\u5143\u5594!\u4e5f\u53ef\u4ee5\u5beb\u4f5c0xffffffff\uff0c\u4f46\u56e0\u70ba\u592a\u919c\u4e86\uff0c\u6240\u4ee5\u9019\u908a\u63d0\u9192\u4e00\u4e0b\uff0c\u62ec\u865f\u53ea\u662f\u8b93\u540c\u5b78\u597d\u5340\u5206\u8ca0\u6578\u6b63\u6578\uff0c\u4e0d\u8ad6\u662finfix\u9084\u662fpostfix\u90fd\u50c5\u8a18\u4e0b\u4e864\u500b\u904b\u7b97\u5143\u548c3\u500b\u904b\u7b97\u5b50\u3002 ::: \u9700\u8981\u91cd\u65b0\u8003\u616e\u7684\u6709\uff1a state\u7684\u8a2d\u8a08\u5283\u5206 \u5728infix2postfix\u4e4b\u4e2d\uff0cstack\u7684\u904b\u7528 \u53c3\u8003\u8cc7\u6e90\uff1achisel-tutorial/src/main/scala/examples/Stack.scala \u53ef\u4ee5\u81ea\u884c\u591a\u52a0 \u6a94\u6848 stack.scala\u4e26\u4f9d\u81ea\u5df1\u8a2d\u8a08\u505a\u66f4\u52d5\uff0c\u7e73\u56de\u4f5c\u696d\u6642\u4e00\u4f75\u4e0a\u50b3\u81f3gitlab\u5373\u53ef\u3002 \u82e5\u662f\u63a1\u7528\u5148\u5b58\u503c\u518d\u8655\u7406\u7684\u65b9\u5f0f\u3002\u7de8\u78bc\u885d\u7a81\u8a72\u5982\u4f55\u8655\u7406? \u904b\u7b97\u514310~15\u90fd\u6703\u9047\u5230\u548c\u7b26\u865f\u7de8\u78bc\u76f8\u885d\u7a81\uff0c\u8a72\u5982\u4f55\u89e3\u6c7a\u5462\uff1f \u8a2d\u8a08\u53c3\u8003\uff1a state\u5283\u5206\uff1a tester input //Situation Input\uff1a1 1 * ( 1 2 - 3 ) * 1 4 + ( 1 5 - ( - 1 6 ) )= postfix:?? Output:1417 Port declaration scala= class CpxCal extends Module{ val io = IO(new Bundle{ val key_in = Input(UInt(4.W)) val value = Output(Valid(UInt(32.W))) }) } :::info General Calculator \u6700\u5f8c\u505a\u51fa\u4f86\u7684\u8a08\u7b97\u6a5f\u61c9\u80fd\u5920\u517c\u5bb9\u524d\u9762\u6240\u6709Lab\u3001Hw\u5b83\u5011tester\u88e1\u9762\u7684\u7b97\u5f0f\u3002 :::","title":"Introduction"},{"location":"lab06/lab6/#bonus","text":"\u5728\u4e0d \u5f71\u97ff\u4f5c\u696d\u8981\u6c42 \u4ee5\u53ca \u66f4\u52d5\u539f\u672c\u7de8\u78bc \u7684\u60c5\u6cc1\u4e0b\uff0c\u540c\u5b78\u53ef\u4ee5\u9078\u64c7... \u5c07\u201c\uff3e\u201d\u529f\u80fd\u5be6\u73fe(Order of Operation 2.) \u8a18\u5f97\u8981\u64f4\u5145key_in\u7684bit\u6578\uff0c\u548ctester\u88e1\u9762\u7684dict \u81ea\u884c\u52a0\u5165\u7b97\u5f0f\u4f5c\u70ba\u6e2c\u503c\uff0c\u4e26\u5728\u7e73\u4ea4\u6587\u4ef6\u4e2d\u8a3b\u660e\u4f60\u6709\u505a\u5230\u7684\u984d\u5916\u529f\u80fd\u3002 \u7b97\u5f0f\u683c\u5f0f\uff1a \u5b57\u4e32\uff0c\u4e2d\u9593\u5fc5\u9808\u7121\u7a7a\u683c \u4ee5\u7b49\u865f\u505a\u7d50\u5c3e\uff0cex: \"(-15)-15-(-15)+(-15)=\" \u7b97\u5f0f\u8981\u5408\u7406\uff0c\u62ec\u865f\u6578\u91cf\u8981\u5c0d\uff01 \u4f7f\u529f\u80fd\u66f4\u4fbf\u5229... \u6bd4\u5982\u8aaa\uff0c\u8ca0\u6578\u53ef\u4ee5\u4e0d\u9700\u8981\u62ec\u865f\u5c31\u80fd\u5920\u5be6\u73fe\uff0c\u7576\u7136\u6709\u62ec\u865f\u7684\u9084\u662f\u5f97\u80fd\u5920\u6b63\u78ba \u4e00\u6a23\u5c07\u201c\u984d\u5916\u529f\u80fd\u201d\u5728\u8aaa\u660e\u6587\u4ef6\u4e0a\u8a3b\u660e\uff0c\u4e26\u52a0\u4e0a\u7b97\u5f0f\u5728tester\u4e2d\u3002","title":"Bonus"},{"location":"lab06/lab6/#hw6-3-lfsr-base-1a2b-number-guess-game","text":"","title":"Hw6-3 LFSR-base 1A2B Number Guess Game"},{"location":"lab06/lab6/#preface_1","text":"\u5229\u7528Lab2\u7684LFSR(Linear feedback shift register)\uff0c\u4f5c\u70ba\u96a8\u6a5f\u6578\u5b57\u7522\u751f\u5668\uff0c\u4e26\u5c07\u5176\u61c9\u7528\u81f3\u7d93\u51781A2B(Bulls and Cows)\u3002 \u96fb\u8def\u884c\u70ba\u63cf\u8ff0\uff1a Reset\u5f8c\uff0cLFSR\u6839\u64daseed\u505a\u70ba\u521d\u59cb\u503c\uff0c\u6bcf\u4e00\u6b21clock\u505a\u4e00\u6b21shift\u3002 Gen\u70ba\u63a1\u6a23\u8a0a\u865f\uff0c\u62c9\u81f3High\u6642\uff0c\u6703\u63a1\u6a23LFSR\u7576\u4e0b \u8655\u7406\u597d \u7684\u503c(ex:1834)\u3002 <- Hw6-3-1 \u7576\u6578\u5217\u7522\u751f\u7121\u8aa4\u5f8c\uff0c ready \u8a0a\u865f\u6703\u62c9\u81f3High\u8b93\u4f7f\u7528\u8005\u77e5\u9053\u53ef\u4ee5\u958b\u59cb\u731c\u3002 Guess[15:0] \u70ba\u73a9\u5bb6\u7684\u8f38\u5165\uff0c\u548c\u984c\u76ee\u4e00\u6a23\u6bcf4\u500bbits\u4ee3\u8868\u4e00\u96a8\u6a5f\u6578\u3002 \u8f38\u5165 Guess \u5f8c\uff0c\u96fb\u8def\u958b\u59cb\u6bd4\u8f03 \u984c\u76ee \u4ee5\u53ca \u731c\u6e2c \uff0c ready \u8a0a\u865f\u6703\u62c9\u81f3Low\u3002\uff0c\u9664\u6b64\u4e4b\u5916\uff0c ready \u8a0a\u865f\u4e5f\u6703\u5728\u6700\u7d42\u7d50\u679c(\u5e7eA\u5e7eB)\u548c valid \u8f38\u51fa\u5f8c\u7684\u4e0b\u4e00\u523b\uff0c\u518d\u6b21\u62c9\u9ad8\u81f3High\u7b49\u5f85\u4e0b\u4e00\u7b46\u731c\u6e2c\u3002 \u8a08\u7b97\u5b8c\u6210\u5f8c\uff0c\u96fb\u8def\u6703\u5c07 valid \u8a0a\u865f\u62c9\u81f3High\uff0c\u4e26\u540c\u6642\u5c07\u5e7eA\u5e7eB\u7d50\u679c\u8f38\u51fa\u3002 \u7576\u8a08\u7b97\u7d50\u675f\u5f8c\uff0c\u9664\u975eA=4\uff0c\u5426\u5247\u96fb\u8def\u53c8\u6703\u5c07 ready\u8a0a\u865f \u62c9\u81f3High\uff0c\u7b49\u5f85\u4e0b\u4e00\u6b21\u7684\u731c\u6e2c\u3002","title":"preface"},{"location":"lab06/lab6/#hw6-3-1-pseudo-random-number-generator","text":":::warning [name=\u5f35\u5cfb\u8c6a] \u5728\u4f5c\u696d\u539f\u59cb\u78bc\u4e2d\uff0c\u6709\u95dc\u65bc io.puzzle \u4fe1\u865f\u7684\u521d\u59cb\u5316 \u539f\u672c\u7684\u7a0b\u5f0f\u78bc\u662f ```scala= io.puzzle := Vec(4, 0.U) \u4f46\u9019\u6a23\u7684\u5beb\u6cd5\u5728\u7de8\u8b6f\u7684\u6642\u5f8c\u6703\u5831\u932f\uff0c\u63d0\u793a \"chisel3.package$ExpectedChiselTypeException: vec type 'UInt<1>(0)' must be a Chisel type, not hardware\" \u6b63\u78ba\u7684\u5beb\u6cd5\u61c9\u6539\u6210\u5982\u4e0b ```scala= io.puzzle := VecInit(Seq.fill(4)(0.U(4.W))) \u61c9\u8a72\u5229\u7528 VecInit \u4f86\u521d\u59cb\u5316\uff0c\u800c\u975e\u76f4\u63a5\u7528 Vec Vec \u61c9\u4f5c\u70ba\u5ba3\u544a\u8a0a\u865f\u7dda\u6642 (without initialization) \u7684\u7528\u6cd5\uff0c\u5982\u679c\u8981\u8ce6\u503c\u5247\u8a72\u63a1\u7528 VecInit :::","title":"Hw6-3-1 Pseudo Random Number Generator"},{"location":"lab06/lab6/#introduction_10","text":"\u4f5c\u696d\u8981\u6c42\uff1a \u8acb\u540c\u5b78\u5be6\u4f5c\u51fa\u4e0016 bits\u7684LFSR\uff0ctap\u7684\u6578\u91cf\u4ee5\u53ca\u64fa\u653e\u4f4d\u7f6e\u5982\u4e0b\u5716\u6240\u793a\u3002 \u4f5c\u70ba1A2B\u7684\u96a8\u6a5f\u6578\u5b57\u7522\u751f\u5668\uff0c\u4ee54 bits\u70ba\u4e00\u500b\u96a8\u6a5f\u7684\u6578\u5b57(\u51714\u500b)\u3002\u9700\u984d\u5916\u8003\u616e... \u96a8\u6a5f\u6578\u5b57\u7bc4\u570d\u70ba10~15\u6642\u8a72\u5982\u4f55\u8655\u7406? \u5c07\u6b64\u7bc4\u570d\u7684\u6578\u5b57\u4f9d\u9806\u5e8fmapping\u81f30~5 \u4ee5\u4e0a\u5716\u70ba\u4f8b\uff1aA C E 1 -> 0 2 4 1 \u6578\u5b57\u91cd\u8907\u6642\u8a72\u5982\u4f55\u8655\u7406\uff1f \u8acb\u540c\u5b78\u81ea\u884c\u8655\u7406\uff0c\u4e26\u5728\u8aaa\u660e\u6587\u4ef6\u4e2d\u8a73\u7d30\u95e1\u8ff0\u4f60\u6240\u4f7f\u7528\u7684\u65b9\u5f0f\u3002 port declaration scala= class PRNG(seed:Int) extends Module{ val io = IO(new Bundle{ val gen = Input(Bool()) val puzzle = Output(Vec(4,UInt(4.W))) val ready = Output(Bool()) }) } gen : \u89f8\u767c\u4fe1\u865f\uff0c\u7576\u8a0a\u865f\u70baHigh\u6642(\u6642\u9577\u70ba 1 clk)\uff0cmodule\u5fc5\u9808\u53d6\u6a23LFSR\u7684\u503c\uff0c\u4e26\u8655\u7406\u6210\u5408\u7406\u7684 \u984c\u76ee :::danger \u540c\u5b78\u5fc5\u9808\u89e3\u6c7a \u8d85\u904e\u7bc4\u570d \u3001 \u91cd\u8907\u503c \u9019\u4e9b\u554f\u984c ::: puzzle : \u51fa\u984c\u984c\u76ee\uff0c\u70ba4*4bits\u683c\u5f0f\uff0c\u4ee3\u8868\u6bcf\u500b\u96a8\u6a5f\u6578\uff0cindex\u7531\u5de6\u81f3\u53f3\u4f9d\u5e8f\u70ba3 2 1 0\u3002 ready : \u7576\u984c\u76ee\u8655\u7406\u597d\u6642\uff0c\u62c9\u9ad8\u81f3High\uff0c\u8b93 \u5916\u90e8 \u4f7f\u7528\u8005\u77e5\u9053\u984c\u76ee\u5df2\u7d93\u6e96\u5099\u597d\u4e86\u3002 tester\u9a57\u8b49\u65b9\u5f0f seed\u9810\u8a2d\u70ba1\uff0c\u540c\u5b78\u53ef\u4e0d\u5fc5\u5728\u610f\u3002 tester\u6703\u5728 \u96a8\u6a5f\u6642\u523b \u62c9\u8d77gen\u8a0a\u865f10\u6b21\u3002 \u6bcf\u4e00\u6b21\u90fd\u6703\u7b49\u5230\u984c\u76ee\u7522\u751f(ready\u81f3High\u6642)\u624d\u6703\u767c\u51fa\u4e0b\u4e00\u6b21\u7684gen\u8a0a\u865f\u3002 \u6aa2\u6e2c\u5167\u5bb9\uff1a \u6578\u5b57\u4e0d\u8d85\u904e\u7bc4\u570d(0~9) \u6578\u5b57\u4e0d\u91cd\u8907 \u6bcf\u6b21\u984c\u76ee\u4e0d\u91cd\u8907\u3002 \u5be6\u969b\u6aa2\u6e2c\u7d50\u679c\uff1a","title":"Introduction"},{"location":"lab06/lab6/#hw6-3-2-1a2b-game-quiz","text":"","title":"Hw6-3-2 1A2B game quiz"},{"location":"lab06/lab6/#introduction_11","text":"\u63a5\u7e8c6-2-1\u7684\u984c\u76ee\u7522\u751f\u5668\uff0c6-2-2\u9700\u8981\u540c\u5b78\u80fd\u900f\u904e\u984c\u76ee(puzzle)\u548c\u731c\u6e2c(guess)\u5169\u500b\u8a0a\u865f\u6e90\u5be6\u73fe\u4e00\u6bd4\u8f03\u96fb\u8def\uff0c\u4e26\u8f38\u51fa\u6bd4\u8f03\u7d50\u679c(\u5e7eA\u5e7eB)\u3002 \u96fb\u8def\u884c\u70ba\u5982\u4e0b\u8aaa\u660e\uff1a tester\u6703\u505a\u7684\u4e8b\uff1a tester\u6703\u5728\u96a8\u6a5f\u6642\u523b\u62c9\u9ad8 gen \uff0cprng\u6703sample\u4e26\u8655\u7406\u597d\u984c\u76ee\u3002 prng\u7522\u751f\u597d\u984c\u76ee\u6642\uff0cready\u8a0a\u865f\u6703\u88ab\u62c9\u9ad8\u3002\u6b64\u6642tester\u6703\u8981\u6c42\u540c\u5b78\u7531\u5de6\u81f3\u53f3\u8f38\u5165\u731c\u6e2c\u5167\u5bb9\u3002 \u540c\u5b78\u9700\u5b8c\u6210\u7684\u4e8b\uff1a \u6bd4\u8f03\u5169\u8005\u5167\u5bb9\uff0c\u8f38\u51fa\u6bd4\u8f03\u7d50\u679c:\u5e7eA\u5e7eB \u6301\u7e8c\u8f38\u5165\u731c\u6e2c\u5167\u5bb9\u76f4\u81f3\u5f97\u52304A (\u653e\u5fc3\u4e00\u958b\u59cb\u6703\u5370\u51fa\u984c\u76ee...) \u9a57\u8b49\u6d41\u7a0b\u6f14\u793a\uff1a from teminal from vcd port declaration ```scala= class NumGuess(seed:Int = 1) extends Module{ require (seed > 0 , \"Seed cannot be 0\") val io = IO(new Bundle{ val gen = Input(Bool()) val guess = Input(UInt(16.W)) val puzzle = Output(Vec(4,UInt(4.W))) //for tester to print value... val ready = Output(Bool()) val valid = Output(Bool()) val A = Output(UInt(3.W)) val B = Output(UInt(3.W)) }) } ```","title":"Introduction"},{"location":"lab06/lab6/#bonus-1a2b-hardware-solver","text":"","title":"Bonus : 1A2B hardware solver"},{"location":"lab06/lab6/#introduction_12","text":"1. \u5c07\u81ea\u5df2\u7684\u89e3\u984c\u6280\u5de7implement\u81f3\u786c\u9ad4\u4e0a\uff0c\u5b8c\u6210solver.scala\u3002 - \u731c\u6e2c\u6578\u5b57\u53ef\u4ee5\u91cd\u8907\uff0cex:1 1 1 1 - \u5728\u6587\u4ef6\u4e2d\u63cf\u8ff0\u81ea\u5df1\u7684 \u89e3\u984c\u7b56\u7565 - port declaration scala= class Solver extends Module{ val io = IO(new Bundle{ val A = Input(UInt(3.W)) val B = Input(UInt(3.W)) val ready = Input(Bool()) val guess = Output(Vec(4,UInt(4.W))) val g_valid = Input(Bool()) val s_valid = Output(Bool()) val finish = Output(Bool()) //end signal }) } 2. \u5229\u7528top.scala\u5c07\u5169\u500bModule(NumGuess.scala\u548cSolver.scala)\u5305\u8d77\u4f86\uff0c\u63d0\u4f9b\u5169\u500b\u6a21\u584a\u7684\u4e92\u52d5\u74b0\u5883\u3002 - \u5169\u500bmodule\u9700\u4e92\u52d5\u76f4\u81f3A=4\uff0c finish =High - waveview for reference - port declaration and wiring ```scala= class top extends Module{ val io = IO(new Bundle{ val gen = Input(Bool()) val finish = Output(Bool()) }) val ng = Module(new NumGuess(1)) val ns = Module(new Solver()) ng.io.gen := io.gen ng.io.guess := ns.io.guess.asUInt ng.io.s_valid := ns.io.s_valid ns.io.A := ng.io.A ns.io.B := ng.io.B ns.io.ready := ng.io.ready ns.io.g_valid := ng.io.g_valid io.finish := ns.io.finish } ```","title":"Introduction"},{"location":"lab06/random-number-generator/","text":"","title":"Random number generator"},{"location":"lab06/traffic-light/","text":"","title":"Traffic light"},{"location":"lab06/zindex_2/","text":"Lab 6 \u6709\u9650\u72c0\u614b\u6a5f \u74b0\u5883\u8a2d\u7f6e cd /workspace/projects git clone https://playlab.computing.ncku.edu.tw:4001/aias_spring_2022/Lab06.git Lab06 cd Lab06 \u4ecb\u7d39 \u5728\u8ab2\u5802\u4e0a\uff0c\u4ecb\u7d39\u4e86... \u96fb\u8def\u884c\u70ba\u7684\u72c0\u614b\u5716(State Transition Diagram)\u7e6a\u88fd\u4e26\u4ee5FSM\u7684\u65b9\u5f0f\u5be6\u73fe FSM\u7684\u57fa\u672c\u7d44\u6210 next state decoder (comb.) output decoder (comb.) state register (seq.) FSM\u7684\u5169\u5927\u6d3e\u5225 Mealey\uff1aoutput\u53ea\u548c\u7576\u524dstate\u76f8\u95dc\u3002 Moore\uff1aoutput\u548c\u7576\u524dstate\u4ee5\u53cainput\u76f8\u95dc\u3002 \u90a3\u5728\u9019\u6b21Lab\u4e2d\u4f60\u6703\u5b78\u7fd2\u5230\uff1a \u57fa\u672cFSM\u7684\u5beb\u6cd5\uff0c\u4e26\u4ee5\u4e4b\u5be6\u73fe\u8907\u96dc\u96fb\u8def\u529f\u80fd Chisel \u7a0b\u5f0f\u8a2d\u8a08\u6280\u5de7 Info \u5efa\u8b70\u540c\u5b78\u53ef\u4ee5\u5148\u95b1\u8b80 chisel book \u7684 FSM \u90e8\u5206\u3002 \u4ee5\u4e0b\u5217\u8209\u4e86\u4e00\u4e9b\u5728\u5be6\u4f5cFSM\u6642\u5e38\u7528\u5230\u7684\u8a9e\u6cd5 Enumeration from chisel3.util.Enum 1 2 3 4 5 6 7 8 9 10 11 // \u8a18\u5f97\u8981\u532f\u5165\u9019\u500b\u51fd\u5f0f\u5eab import chisel3 . util . _ val sIdle :: sMonday :: sTuesday :: sWendsday :: Nil = Enum ( 4 ) // \u4e5f\u53ef\u4ee5\u7528\u9010\u4e00\u5ba3\u544a\u7684\u65b9\u5f0f val sIdle = 0 . U val sMonday = 1 . U val sTuesday = 2 . U val sWendsday = 3 . U ... \u9084\u8a18\u5f97preview\uff0c\u6709\u653e\u4e0a\u5169\u7bc7\u4ecb\u7d39scala\u4e2d\u6709\u95dc\u5404\u5f0f \u96c6\u5408 \u7684\u6587\u7ae0\u55ce\uff1f 1 \u548c 2 Enum(4)\u6703\u7de8\u865f\u5de6\u908alist\u4e2d\u6bcf\u500b\u5143\u7d20\uff0cDtype\u70baUInt\uff0c\u5f9e0.U\u958b\u59cb\u3002 Nil\u70balist\u7684\u7d50\u5c3e\uff0c\u4e0d\u5305\u542b\u5728list\u7684\u201c\u9577\u5ea6\u201d\u4e2d\u3002 \u6240\u4ee5\u5728\u4f60\u4f7f\u7528\u689d\u4ef6\u5224\u65b7\u6642\uff0c\u4e0b\u9762\u9019\u5169\u884c\u662f\u7b49\u50f9\u7684\uff0c\u4f46\u4e0a\u9762\u7684\u5224\u8b80\u6027\u5c31\u76f8\u5c0d\u8f03\u597d\u4e9b\u3002 1 2 when ( state === sIdle ) { ... } when ( state === 0 . U ) { ... } Conditional block when-elsewhen-otherwise format chisel= when(condition){ //behavior }.elsewhen(condition){ //behavior }.otherwise{ //default behavior } :::info reminder chisel\u4e2d\uff1a \u7b49\u65bc ( === )\u548c \u4e0d\u7b49\u65bc ( =/= ) elsewhen\u548cotherwise\u524d\u9762\u8981\u8a18\u5f97\u52a0\u4e0a\u9ede(.) ::: switch-is format ```chisel= // default behavior switch(\u5224\u65b7\u5c0d\u8c61){ is(condition){ //behavior } is(condition){ //behavior } ... } ``` :::info - reminder - switch-is\u672c\u8eab\u6c92\u6709\u53ef\u4ee5\u6c7a\u5b9a\u96fb\u8defdefault\u884c\u70ba\u7684\u5beb\u6cd5\uff0c\u6703\u5efa\u8b70\u5927\u5bb6\u5728 \u524d\u9762 \u88dc\u4e0adefault behavior\u3002 - \u88dc\u9f4a\u8a0a\u865f\u96a8\u689d\u4ef6\u6539\u8b8a\u7684\u5b8c\u6574\u6027\uff0c\u786c\u9ad4\u5408\u6210\u6642\u53ef\u4ee5\u6e1b\u5c11latch\u7684\u51fa\u73fe\u3002 - default\u5ba3\u544a\u5728\u524d\u9762\u662f\u56e0\u70bachisel\u662f\u8d8a \u5f8c\u9762 \u7684\u5ba3\u544apriority\u8d8a\u5927\u3002 :::","title":"Lab 6 \u6709\u9650\u72c0\u614b\u6a5f"},{"location":"lab06/zindex_2/#lab-6","text":"","title":"Lab 6 \u6709\u9650\u72c0\u614b\u6a5f"},{"location":"lab06/zindex_2/#_1","text":"cd /workspace/projects git clone https://playlab.computing.ncku.edu.tw:4001/aias_spring_2022/Lab06.git Lab06 cd Lab06","title":"\u74b0\u5883\u8a2d\u7f6e"},{"location":"lab06/zindex_2/#_2","text":"\u5728\u8ab2\u5802\u4e0a\uff0c\u4ecb\u7d39\u4e86... \u96fb\u8def\u884c\u70ba\u7684\u72c0\u614b\u5716(State Transition Diagram)\u7e6a\u88fd\u4e26\u4ee5FSM\u7684\u65b9\u5f0f\u5be6\u73fe FSM\u7684\u57fa\u672c\u7d44\u6210 next state decoder (comb.) output decoder (comb.) state register (seq.) FSM\u7684\u5169\u5927\u6d3e\u5225 Mealey\uff1aoutput\u53ea\u548c\u7576\u524dstate\u76f8\u95dc\u3002 Moore\uff1aoutput\u548c\u7576\u524dstate\u4ee5\u53cainput\u76f8\u95dc\u3002 \u90a3\u5728\u9019\u6b21Lab\u4e2d\u4f60\u6703\u5b78\u7fd2\u5230\uff1a \u57fa\u672cFSM\u7684\u5beb\u6cd5\uff0c\u4e26\u4ee5\u4e4b\u5be6\u73fe\u8907\u96dc\u96fb\u8def\u529f\u80fd","title":"\u4ecb\u7d39"},{"location":"lab06/zindex_2/#chisel","text":"Info \u5efa\u8b70\u540c\u5b78\u53ef\u4ee5\u5148\u95b1\u8b80 chisel book \u7684 FSM \u90e8\u5206\u3002 \u4ee5\u4e0b\u5217\u8209\u4e86\u4e00\u4e9b\u5728\u5be6\u4f5cFSM\u6642\u5e38\u7528\u5230\u7684\u8a9e\u6cd5","title":"Chisel \u7a0b\u5f0f\u8a2d\u8a08\u6280\u5de7"},{"location":"lab06/zindex_2/#enumeration","text":"from chisel3.util.Enum 1 2 3 4 5 6 7 8 9 10 11 // \u8a18\u5f97\u8981\u532f\u5165\u9019\u500b\u51fd\u5f0f\u5eab import chisel3 . util . _ val sIdle :: sMonday :: sTuesday :: sWendsday :: Nil = Enum ( 4 ) // \u4e5f\u53ef\u4ee5\u7528\u9010\u4e00\u5ba3\u544a\u7684\u65b9\u5f0f val sIdle = 0 . U val sMonday = 1 . U val sTuesday = 2 . U val sWendsday = 3 . U ... \u9084\u8a18\u5f97preview\uff0c\u6709\u653e\u4e0a\u5169\u7bc7\u4ecb\u7d39scala\u4e2d\u6709\u95dc\u5404\u5f0f \u96c6\u5408 \u7684\u6587\u7ae0\u55ce\uff1f 1 \u548c 2 Enum(4)\u6703\u7de8\u865f\u5de6\u908alist\u4e2d\u6bcf\u500b\u5143\u7d20\uff0cDtype\u70baUInt\uff0c\u5f9e0.U\u958b\u59cb\u3002 Nil\u70balist\u7684\u7d50\u5c3e\uff0c\u4e0d\u5305\u542b\u5728list\u7684\u201c\u9577\u5ea6\u201d\u4e2d\u3002 \u6240\u4ee5\u5728\u4f60\u4f7f\u7528\u689d\u4ef6\u5224\u65b7\u6642\uff0c\u4e0b\u9762\u9019\u5169\u884c\u662f\u7b49\u50f9\u7684\uff0c\u4f46\u4e0a\u9762\u7684\u5224\u8b80\u6027\u5c31\u76f8\u5c0d\u8f03\u597d\u4e9b\u3002 1 2 when ( state === sIdle ) { ... } when ( state === 0 . U ) { ... } Conditional block when-elsewhen-otherwise format chisel= when(condition){ //behavior }.elsewhen(condition){ //behavior }.otherwise{ //default behavior } :::info reminder chisel\u4e2d\uff1a \u7b49\u65bc ( === )\u548c \u4e0d\u7b49\u65bc ( =/= ) elsewhen\u548cotherwise\u524d\u9762\u8981\u8a18\u5f97\u52a0\u4e0a\u9ede(.) ::: switch-is format ```chisel= // default behavior switch(\u5224\u65b7\u5c0d\u8c61){ is(condition){ //behavior } is(condition){ //behavior } ... } ``` :::info - reminder - switch-is\u672c\u8eab\u6c92\u6709\u53ef\u4ee5\u6c7a\u5b9a\u96fb\u8defdefault\u884c\u70ba\u7684\u5beb\u6cd5\uff0c\u6703\u5efa\u8b70\u5927\u5bb6\u5728 \u524d\u9762 \u88dc\u4e0adefault behavior\u3002 - \u88dc\u9f4a\u8a0a\u865f\u96a8\u689d\u4ef6\u6539\u8b8a\u7684\u5b8c\u6574\u6027\uff0c\u786c\u9ad4\u5408\u6210\u6642\u53ef\u4ee5\u6e1b\u5c11latch\u7684\u51fa\u73fe\u3002 - default\u5ba3\u544a\u5728\u524d\u9762\u662f\u56e0\u70bachisel\u662f\u8d8a \u5f8c\u9762 \u7684\u5ba3\u544apriority\u8d8a\u5927\u3002 :::","title":"Enumeration"},{"location":"lab07/","text":"","title":"Index"},{"location":"lab08/","text":"","title":"Index"},{"location":"lab09/","text":"","title":"Index"}]}